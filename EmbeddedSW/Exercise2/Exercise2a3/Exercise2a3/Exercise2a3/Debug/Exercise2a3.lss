
Exercise2a3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000712  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000712  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000712  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a70  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad6  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b95  00000000  00000000  00002dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b0  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c6  00000000  00000000  00004338  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_16>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a9 30       	cpi	r26, 0x09	; 9
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 c3 01 	call	0x386	; 0x386 <main>
  d8:	0c 94 4d 03 	jmp	0x69a	; 0x69a <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <_Z9PinsToLowv>:
ï»¿/* */
#include <Arduino.h>

void PinsToLow(){
	digitalWrite(2, LOW);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(3, LOW);
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(4, LOW);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(5, LOW);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(6, LOW);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(7, LOW);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(8, LOW);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	0c 94 1d 03 	jmp	0x63a	; 0x63a <digitalWrite>

00000118 <_Z10PinsToHighv>:
}

void PinsToHigh(){
	digitalWrite(2, HIGH);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(3, HIGH);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(4, HIGH);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(5, HIGH);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	85 e0       	ldi	r24, 0x05	; 5
 134:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(6, HIGH);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(7, HIGH);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	87 e0       	ldi	r24, 0x07	; 7
 144:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(8, HIGH);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	0c 94 1d 03 	jmp	0x63a	; 0x63a <digitalWrite>

00000150 <setup>:
}


void setup() {
  // 
  pinMode(2, OUTPUT);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pinMode>
  pinMode(3, OUTPUT);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pinMode>
  pinMode(4, OUTPUT);
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pinMode>
  pinMode(5, OUTPUT);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	85 e0       	ldi	r24, 0x05	; 5
 16c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pinMode>
  pinMode(6, OUTPUT);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pinMode>
  pinMode(7, OUTPUT);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	87 e0       	ldi	r24, 0x07	; 7
 17c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pinMode>
  pinMode(8, OUTPUT);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	88 e0       	ldi	r24, 0x08	; 8
 184:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <pinMode>

00000188 <loop>:
	  
}

void loop() {
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	c3 e0       	ldi	r28, 0x03	; 3
 192:	d0 e0       	ldi	r29, 0x00	; 0
  // put your main code here, to run repeatedly:
  for (int i = 0; i < 3; i++){
	  PinsToLow();
 194:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z9PinsToLowv>
	  digitalWrite(3, HIGH);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  digitalWrite(4, HIGH);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  delay(1000);
 1a8:	68 ee       	ldi	r22, 0xE8	; 232
 1aa:	73 e0       	ldi	r23, 0x03	; 3
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	  PinsToLow();
 1b4:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z9PinsToLowv>
	  digitalWrite(8, HIGH);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  digitalWrite(6, HIGH);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  delay(1000);
 1c8:	68 ee       	ldi	r22, 0xE8	; 232
 1ca:	73 e0       	ldi	r23, 0x03	; 3
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 41 02 	call	0x482	; 0x482 <delay>
 1d4:	21 97       	sbiw	r28, 0x01	; 1
	  
}

void loop() {
  // put your main code here, to run repeatedly:
  for (int i = 0; i < 3; i++){
 1d6:	f1 f6       	brne	.-68     	; 0x194 <loop+0xc>
 1d8:	c3 e0       	ldi	r28, 0x03	; 3
 1da:	d0 e0       	ldi	r29, 0x00	; 0
	  digitalWrite(8, HIGH);
	  digitalWrite(6, HIGH);
	  delay(1000);
  }
  for (int i = 0; i < 3; i++){
	  PinsToHigh();
 1dc:	0e 94 8c 00 	call	0x118	; 0x118 <_Z10PinsToHighv>
	  digitalWrite(6, LOW);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  delay(300);
 1e8:	6c e2       	ldi	r22, 0x2C	; 44
 1ea:	71 e0       	ldi	r23, 0x01	; 1
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	  digitalWrite(6, HIGH);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  digitalWrite(8, LOW);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  delay(300);
 204:	6c e2       	ldi	r22, 0x2C	; 44
 206:	71 e0       	ldi	r23, 0x01	; 1
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	  digitalWrite(8, HIGH);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  digitalWrite(2, LOW);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  delay(300);
 220:	6c e2       	ldi	r22, 0x2C	; 44
 222:	71 e0       	ldi	r23, 0x01	; 1
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	  digitalWrite(2, HIGH);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  digitalWrite(3, LOW);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  delay(300);
 23c:	6c e2       	ldi	r22, 0x2C	; 44
 23e:	71 e0       	ldi	r23, 0x01	; 1
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	  digitalWrite(3, HIGH);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  digitalWrite(4, LOW);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  delay(300);
 258:	6c e2       	ldi	r22, 0x2C	; 44
 25a:	71 e0       	ldi	r23, 0x01	; 1
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	  digitalWrite(4, HIGH);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  digitalWrite(5, LOW);
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	  delay(300);
 274:	6c e2       	ldi	r22, 0x2C	; 44
 276:	71 e0       	ldi	r23, 0x01	; 1
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	  digitalWrite(5, HIGH);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	85 e0       	ldi	r24, 0x05	; 5
 284:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
 288:	21 97       	sbiw	r28, 0x01	; 1
	  PinsToLow();
	  digitalWrite(8, HIGH);
	  digitalWrite(6, HIGH);
	  delay(1000);
  }
  for (int i = 0; i < 3; i++){
 28a:	09 f0       	breq	.+2      	; 0x28e <loop+0x106>
 28c:	a7 cf       	rjmp	.-178    	; 0x1dc <loop+0x54>
 28e:	03 e0       	ldi	r16, 0x03	; 3
 290:	10 e0       	ldi	r17, 0x00	; 0
	  digitalWrite(5, LOW);
	  delay(300);
	  digitalWrite(5, HIGH);
  }
 for (int i = 0; i < 3; i++){
	 PinsToLow();
 292:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z9PinsToLowv>
	 delay(500);
 296:	64 ef       	ldi	r22, 0xF4	; 244
 298:	71 e0       	ldi	r23, 0x01	; 1
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 41 02 	call	0x482	; 0x482 <delay>
 2a2:	c2 e0       	ldi	r28, 0x02	; 2
	 for (int a = 2; a < 9; a++)
	 {
		 digitalWrite(a, HIGH);
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	8c 2f       	mov	r24, r28
 2a8:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
		 delay(500);
 2ac:	64 ef       	ldi	r22, 0xF4	; 244
 2ae:	71 e0       	ldi	r23, 0x01	; 1
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 41 02 	call	0x482	; 0x482 <delay>
 2b8:	cf 5f       	subi	r28, 0xFF	; 255
	  digitalWrite(5, HIGH);
  }
 for (int i = 0; i < 3; i++){
	 PinsToLow();
	 delay(500);
	 for (int a = 2; a < 9; a++)
 2ba:	c9 30       	cpi	r28, 0x09	; 9
 2bc:	99 f7       	brne	.-26     	; 0x2a4 <loop+0x11c>
 2be:	01 50       	subi	r16, 0x01	; 1
 2c0:	11 09       	sbc	r17, r1
	  digitalWrite(4, HIGH);
	  digitalWrite(5, LOW);
	  delay(300);
	  digitalWrite(5, HIGH);
  }
 for (int i = 0; i < 3; i++){
 2c2:	39 f7       	brne	.-50     	; 0x292 <loop+0x10a>
 2c4:	c3 e0       	ldi	r28, 0x03	; 3
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
		 digitalWrite(a, HIGH);
		 delay(500);
	 } 
 } 
 for (int i = 0; i < 3; i++){
	 PinsToHigh();
 2c8:	0e 94 8c 00 	call	0x118	; 0x118 <_Z10PinsToHighv>
	 digitalWrite(6, LOW);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 delay(300);
 2d4:	6c e2       	ldi	r22, 0x2C	; 44
 2d6:	71 e0       	ldi	r23, 0x01	; 1
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	 digitalWrite(6, HIGH);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 digitalWrite(5, LOW);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	85 e0       	ldi	r24, 0x05	; 5
 2ec:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 delay(300);
 2f0:	6c e2       	ldi	r22, 0x2C	; 44
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	 digitalWrite(5, HIGH);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 digitalWrite(4, LOW);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 delay(300);
 30c:	6c e2       	ldi	r22, 0x2C	; 44
 30e:	71 e0       	ldi	r23, 0x01	; 1
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	 digitalWrite(4, HIGH);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 digitalWrite(3, LOW);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 delay(300);
 328:	6c e2       	ldi	r22, 0x2C	; 44
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	 digitalWrite(3, HIGH);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 digitalWrite(2, LOW);
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 delay(300);
 344:	6c e2       	ldi	r22, 0x2C	; 44
 346:	71 e0       	ldi	r23, 0x01	; 1
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	 digitalWrite(2, HIGH);
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 digitalWrite(8, LOW);
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	88 e0       	ldi	r24, 0x08	; 8
 35c:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	 delay(300);
 360:	6c e2       	ldi	r22, 0x2C	; 44
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 41 02 	call	0x482	; 0x482 <delay>
	 digitalWrite(8, HIGH);
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	88 e0       	ldi	r24, 0x08	; 8
 370:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
 374:	21 97       	sbiw	r28, 0x01	; 1
	 {
		 digitalWrite(a, HIGH);
		 delay(500);
	 } 
 } 
 for (int i = 0; i < 3; i++){
 376:	09 f0       	breq	.+2      	; 0x37a <loop+0x1f2>
 378:	a7 cf       	rjmp	.-178    	; 0x2c8 <loop+0x140>
	 digitalWrite(2, HIGH);
	 digitalWrite(8, LOW);
	 delay(300);
	 digitalWrite(8, HIGH);
 }
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <initVariant>:
 384:	08 95       	ret

00000386 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 386:	0e 94 7d 02 	call	0x4fa	; 0x4fa <init>

	initVariant();
 38a:	0e 94 c2 01 	call	0x384	; 0x384 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 38e:	0e 94 a8 00 	call	0x150	; 0x150 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 392:	c0 e0       	ldi	r28, 0x00	; 0
 394:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 396:	0e 94 c4 00 	call	0x188	; 0x188 <loop>
		if (serialEventRun) serialEventRun();
 39a:	20 97       	sbiw	r28, 0x00	; 0
 39c:	e1 f3       	breq	.-8      	; 0x396 <main+0x10>
 39e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3a2:	f9 cf       	rjmp	.-14     	; 0x396 <main+0x10>

000003a4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 3be:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 3c2:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 3c6:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
 3ca:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>
 3ce:	23 e0       	ldi	r18, 0x03	; 3
 3d0:	23 0f       	add	r18, r19
 3d2:	2d 37       	cpi	r18, 0x7D	; 125
 3d4:	20 f4       	brcc	.+8      	; 0x3de <__vector_16+0x3a>
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	a1 1d       	adc	r26, r1
 3da:	b1 1d       	adc	r27, r1
 3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <__vector_16+0x44>
 3de:	26 e8       	ldi	r18, 0x86	; 134
 3e0:	23 0f       	add	r18, r19
 3e2:	02 96       	adiw	r24, 0x02	; 2
 3e4:	a1 1d       	adc	r26, r1
 3e6:	b1 1d       	adc	r27, r1
 3e8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 3ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 3f0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 3f4:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 3f8:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 3fc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 400:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 404:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 408:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	a1 1d       	adc	r26, r1
 410:	b1 1d       	adc	r27, r1
 412:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 416:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 41a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 41e:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	3f 91       	pop	r19
 42c:	2f 91       	pop	r18
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <micros>:
 438:	3f b7       	in	r19, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 440:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 444:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 448:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 44c:	26 b5       	in	r18, 0x26	; 38
 44e:	a8 9b       	sbis	0x15, 0	; 21
 450:	05 c0       	rjmp	.+10     	; 0x45c <micros+0x24>
 452:	2f 3f       	cpi	r18, 0xFF	; 255
 454:	19 f0       	breq	.+6      	; 0x45c <micros+0x24>
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	a1 1d       	adc	r26, r1
 45a:	b1 1d       	adc	r27, r1
 45c:	3f bf       	out	0x3f, r19	; 63
 45e:	ba 2f       	mov	r27, r26
 460:	a9 2f       	mov	r26, r25
 462:	98 2f       	mov	r25, r24
 464:	88 27       	eor	r24, r24
 466:	82 0f       	add	r24, r18
 468:	91 1d       	adc	r25, r1
 46a:	a1 1d       	adc	r26, r1
 46c:	b1 1d       	adc	r27, r1
 46e:	bc 01       	movw	r22, r24
 470:	cd 01       	movw	r24, r26
 472:	42 e0       	ldi	r20, 0x02	; 2
 474:	66 0f       	add	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	4a 95       	dec	r20
 47e:	d1 f7       	brne	.-12     	; 0x474 <micros+0x3c>
 480:	08 95       	ret

00000482 <delay>:
 482:	8f 92       	push	r8
 484:	9f 92       	push	r9
 486:	af 92       	push	r10
 488:	bf 92       	push	r11
 48a:	cf 92       	push	r12
 48c:	df 92       	push	r13
 48e:	ef 92       	push	r14
 490:	ff 92       	push	r15
 492:	6b 01       	movw	r12, r22
 494:	7c 01       	movw	r14, r24
 496:	0e 94 1c 02 	call	0x438	; 0x438 <micros>
 49a:	4b 01       	movw	r8, r22
 49c:	5c 01       	movw	r10, r24
 49e:	c1 14       	cp	r12, r1
 4a0:	d1 04       	cpc	r13, r1
 4a2:	e1 04       	cpc	r14, r1
 4a4:	f1 04       	cpc	r15, r1
 4a6:	01 f1       	breq	.+64     	; 0x4e8 <delay+0x66>
 4a8:	0e 94 4c 03 	call	0x698	; 0x698 <yield>
 4ac:	0e 94 1c 02 	call	0x438	; 0x438 <micros>
 4b0:	dc 01       	movw	r26, r24
 4b2:	cb 01       	movw	r24, r22
 4b4:	88 19       	sub	r24, r8
 4b6:	99 09       	sbc	r25, r9
 4b8:	aa 09       	sbc	r26, r10
 4ba:	bb 09       	sbc	r27, r11
 4bc:	88 3e       	cpi	r24, 0xE8	; 232
 4be:	93 40       	sbci	r25, 0x03	; 3
 4c0:	a1 05       	cpc	r26, r1
 4c2:	b1 05       	cpc	r27, r1
 4c4:	60 f3       	brcs	.-40     	; 0x49e <delay+0x1c>
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	c2 1a       	sub	r12, r18
 4ca:	d1 08       	sbc	r13, r1
 4cc:	e1 08       	sbc	r14, r1
 4ce:	f1 08       	sbc	r15, r1
 4d0:	88 ee       	ldi	r24, 0xE8	; 232
 4d2:	88 0e       	add	r8, r24
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	98 1e       	adc	r9, r24
 4d8:	a1 1c       	adc	r10, r1
 4da:	b1 1c       	adc	r11, r1
 4dc:	c1 14       	cp	r12, r1
 4de:	d1 04       	cpc	r13, r1
 4e0:	e1 04       	cpc	r14, r1
 4e2:	f1 04       	cpc	r15, r1
 4e4:	19 f7       	brne	.-58     	; 0x4ac <delay+0x2a>
 4e6:	db cf       	rjmp	.-74     	; 0x49e <delay+0x1c>
 4e8:	ff 90       	pop	r15
 4ea:	ef 90       	pop	r14
 4ec:	df 90       	pop	r13
 4ee:	cf 90       	pop	r12
 4f0:	bf 90       	pop	r11
 4f2:	af 90       	pop	r10
 4f4:	9f 90       	pop	r9
 4f6:	8f 90       	pop	r8
 4f8:	08 95       	ret

000004fa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 4fa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 4fc:	84 b5       	in	r24, 0x24	; 36
 4fe:	82 60       	ori	r24, 0x02	; 2
 500:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 502:	84 b5       	in	r24, 0x24	; 36
 504:	81 60       	ori	r24, 0x01	; 1
 506:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 508:	85 b5       	in	r24, 0x25	; 37
 50a:	82 60       	ori	r24, 0x02	; 2
 50c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 50e:	85 b5       	in	r24, 0x25	; 37
 510:	81 60       	ori	r24, 0x01	; 1
 512:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 514:	ee e6       	ldi	r30, 0x6E	; 110
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	81 60       	ori	r24, 0x01	; 1
 51c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 51e:	e1 e8       	ldi	r30, 0x81	; 129
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 524:	80 81       	ld	r24, Z
 526:	82 60       	ori	r24, 0x02	; 2
 528:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 52a:	80 81       	ld	r24, Z
 52c:	81 60       	ori	r24, 0x01	; 1
 52e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 530:	e0 e8       	ldi	r30, 0x80	; 128
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	81 60       	ori	r24, 0x01	; 1
 538:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 53a:	e1 eb       	ldi	r30, 0xB1	; 177
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	84 60       	ori	r24, 0x04	; 4
 542:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 544:	e0 eb       	ldi	r30, 0xB0	; 176
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	81 60       	ori	r24, 0x01	; 1
 54c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 54e:	ea e7       	ldi	r30, 0x7A	; 122
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	84 60       	ori	r24, 0x04	; 4
 556:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 558:	80 81       	ld	r24, Z
 55a:	82 60       	ori	r24, 0x02	; 2
 55c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 55e:	80 81       	ld	r24, Z
 560:	81 60       	ori	r24, 0x01	; 1
 562:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 564:	80 81       	ld	r24, Z
 566:	80 68       	ori	r24, 0x80	; 128
 568:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 56a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 56e:	08 95       	ret

00000570 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 570:	83 30       	cpi	r24, 0x03	; 3
 572:	81 f0       	breq	.+32     	; 0x594 <turnOffPWM+0x24>
 574:	28 f4       	brcc	.+10     	; 0x580 <turnOffPWM+0x10>
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	99 f0       	breq	.+38     	; 0x5a0 <turnOffPWM+0x30>
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	a1 f0       	breq	.+40     	; 0x5a6 <turnOffPWM+0x36>
 57e:	08 95       	ret
 580:	87 30       	cpi	r24, 0x07	; 7
 582:	a9 f0       	breq	.+42     	; 0x5ae <turnOffPWM+0x3e>
 584:	88 30       	cpi	r24, 0x08	; 8
 586:	b9 f0       	breq	.+46     	; 0x5b6 <turnOffPWM+0x46>
 588:	84 30       	cpi	r24, 0x04	; 4
 58a:	d1 f4       	brne	.+52     	; 0x5c0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 58c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 590:	8f 7d       	andi	r24, 0xDF	; 223
 592:	03 c0       	rjmp	.+6      	; 0x59a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 594:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 598:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 59a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 59e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 5a0:	84 b5       	in	r24, 0x24	; 36
 5a2:	8f 77       	andi	r24, 0x7F	; 127
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 5a6:	84 b5       	in	r24, 0x24	; 36
 5a8:	8f 7d       	andi	r24, 0xDF	; 223
 5aa:	84 bd       	out	0x24, r24	; 36
 5ac:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 5ae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5b2:	8f 77       	andi	r24, 0x7F	; 127
 5b4:	03 c0       	rjmp	.+6      	; 0x5bc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 5b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5ba:	8f 7d       	andi	r24, 0xDF	; 223
 5bc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5c0:	08 95       	ret

000005c2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	fc 01       	movw	r30, r24
 5ca:	e4 58       	subi	r30, 0x84	; 132
 5cc:	ff 4f       	sbci	r31, 0xFF	; 255
 5ce:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 5d0:	fc 01       	movw	r30, r24
 5d2:	e0 57       	subi	r30, 0x70	; 112
 5d4:	ff 4f       	sbci	r31, 0xFF	; 255
 5d6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 5d8:	88 23       	and	r24, r24
 5da:	61 f1       	breq	.+88     	; 0x634 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	fc 01       	movw	r30, r24
 5e4:	e2 55       	subi	r30, 0x52	; 82
 5e6:	ff 4f       	sbci	r31, 0xFF	; 255
 5e8:	c5 91       	lpm	r28, Z+
 5ea:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 5ec:	fc 01       	movw	r30, r24
 5ee:	ec 55       	subi	r30, 0x5C	; 92
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	a5 91       	lpm	r26, Z+
 5f4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 5f6:	61 11       	cpse	r22, r1
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 5fa:	9f b7       	in	r25, 0x3f	; 63
                cli();
 5fc:	f8 94       	cli
		*reg &= ~bit;
 5fe:	88 81       	ld	r24, Y
 600:	20 95       	com	r18
 602:	82 23       	and	r24, r18
 604:	88 83       	st	Y, r24
		*out &= ~bit;
 606:	ec 91       	ld	r30, X
 608:	2e 23       	and	r18, r30
 60a:	0b c0       	rjmp	.+22     	; 0x622 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 60c:	62 30       	cpi	r22, 0x02	; 2
 60e:	61 f4       	brne	.+24     	; 0x628 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 610:	9f b7       	in	r25, 0x3f	; 63
                cli();
 612:	f8 94       	cli
		*reg &= ~bit;
 614:	88 81       	ld	r24, Y
 616:	32 2f       	mov	r19, r18
 618:	30 95       	com	r19
 61a:	83 23       	and	r24, r19
 61c:	88 83       	st	Y, r24
		*out |= bit;
 61e:	ec 91       	ld	r30, X
 620:	2e 2b       	or	r18, r30
 622:	2c 93       	st	X, r18
		SREG = oldSREG;
 624:	9f bf       	out	0x3f, r25	; 63
 626:	06 c0       	rjmp	.+12     	; 0x634 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 628:	8f b7       	in	r24, 0x3f	; 63
                cli();
 62a:	f8 94       	cli
		*reg |= bit;
 62c:	e8 81       	ld	r30, Y
 62e:	2e 2b       	or	r18, r30
 630:	28 83       	st	Y, r18
		SREG = oldSREG;
 632:	8f bf       	out	0x3f, r24	; 63
	}
}
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	f9 01       	movw	r30, r18
 646:	e8 59       	subi	r30, 0x98	; 152
 648:	ff 4f       	sbci	r31, 0xFF	; 255
 64a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 64c:	f9 01       	movw	r30, r18
 64e:	e4 58       	subi	r30, 0x84	; 132
 650:	ff 4f       	sbci	r31, 0xFF	; 255
 652:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 654:	f9 01       	movw	r30, r18
 656:	e0 57       	subi	r30, 0x70	; 112
 658:	ff 4f       	sbci	r31, 0xFF	; 255
 65a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 65c:	cc 23       	and	r28, r28
 65e:	c1 f0       	breq	.+48     	; 0x690 <digitalWrite+0x56>
 660:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 662:	81 11       	cpse	r24, r1
 664:	0e 94 b8 02 	call	0x570	; 0x570 <turnOffPWM>

	out = portOutputRegister(port);
 668:	ec 2f       	mov	r30, r28
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	ec 55       	subi	r30, 0x5C	; 92
 672:	ff 4f       	sbci	r31, 0xFF	; 255
 674:	a5 91       	lpm	r26, Z+
 676:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 678:	9f b7       	in	r25, 0x3f	; 63
	cli();
 67a:	f8 94       	cli

	if (val == LOW) {
 67c:	11 11       	cpse	r17, r1
 67e:	04 c0       	rjmp	.+8      	; 0x688 <digitalWrite+0x4e>
		*out &= ~bit;
 680:	8c 91       	ld	r24, X
 682:	d0 95       	com	r29
 684:	d8 23       	and	r29, r24
 686:	02 c0       	rjmp	.+4      	; 0x68c <digitalWrite+0x52>
	} else {
		*out |= bit;
 688:	ec 91       	ld	r30, X
 68a:	de 2b       	or	r29, r30
 68c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 68e:	9f bf       	out	0x3f, r25	; 63
}
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	08 95       	ret

00000698 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 698:	08 95       	ret

0000069a <_exit>:
 69a:	f8 94       	cli

0000069c <__stop_program>:
 69c:	ff cf       	rjmp	.-2      	; 0x69c <__stop_program>
