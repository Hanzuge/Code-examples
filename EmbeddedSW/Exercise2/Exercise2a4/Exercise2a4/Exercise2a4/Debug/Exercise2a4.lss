
Exercise2a4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  0000054c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001370  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6b  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096a  00000000  00000000  00002497  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00002e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a5  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000954  00000000  00000000  000038d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004229  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	e8 ed       	ldi	r30, 0xD8	; 216
  cc:	f4 e0       	ldi	r31, 0x04	; 4
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a0 30       	cpi	r26, 0x00	; 0
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a0 e0       	ldi	r26, 0x00	; 0
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	a9 30       	cpi	r26, 0x09	; 9
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  ee:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <setup>:

#define LED 13

void blinkLed();

void setup() {
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62

	pinMode(LED, OUTPUT);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	0e 94 fe 01 	call	0x3fc	; 0x3fc <pinMode>
}
 106:	00 00       	nop
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <loop>:

void loop() {
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <loop+0x6>
 114:	00 d0       	rcall	.+0      	; 0x116 <loop+0x8>
 116:	00 d0       	rcall	.+0      	; 0x118 <loop+0xa>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
	
	int rounds = 7;
 11c:	87 e0       	ldi	r24, 0x07	; 7
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9e 83       	std	Y+6, r25	; 0x06
 122:	8d 83       	std	Y+5, r24	; 0x05
	int counter = 0;
 124:	1a 82       	std	Y+2, r1	; 0x02
 126:	19 82       	std	Y+1, r1	; 0x01

	for (int i = 0; i < rounds; i++) {
 128:	1c 82       	std	Y+4, r1	; 0x04
 12a:	1b 82       	std	Y+3, r1	; 0x03
 12c:	2b 81       	ldd	r18, Y+3	; 0x03
 12e:	3c 81       	ldd	r19, Y+4	; 0x04
 130:	8d 81       	ldd	r24, Y+5	; 0x05
 132:	9e 81       	ldd	r25, Y+6	; 0x06
 134:	28 17       	cp	r18, r24
 136:	39 07       	cpc	r19, r25
 138:	6c f4       	brge	.+26     	; 0x154 <loop+0x46>

		blinkLed();
 13a:	0e 94 b4 00 	call	0x168	; 0x168 <_Z8blinkLedv>
		counter = counter + 3;
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	9a 81       	ldd	r25, Y+2	; 0x02
 142:	03 96       	adiw	r24, 0x03	; 3
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	89 83       	std	Y+1, r24	; 0x01
void loop() {
	
	int rounds = 7;
	int counter = 0;

	for (int i = 0; i < rounds; i++) {
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	9c 81       	ldd	r25, Y+4	; 0x04
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	9c 83       	std	Y+4, r25	; 0x04
 150:	8b 83       	std	Y+3, r24	; 0x03
 152:	ec cf       	rjmp	.-40     	; 0x12c <loop+0x1e>

		blinkLed();
		counter = counter + 3;
	}
}
 154:	00 00       	nop
 156:	26 96       	adiw	r28, 0x06	; 6
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <_Z8blinkLedv>:

void blinkLed() {
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	00 d0       	rcall	.+0      	; 0x16e <_Z8blinkLedv+0x6>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	
	for (int i = 0; i < 3; i++) {
 172:	1a 82       	std	Y+2, r1	; 0x02
 174:	19 82       	std	Y+1, r1	; 0x01
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	9a 81       	ldd	r25, Y+2	; 0x02
 17a:	03 97       	sbiw	r24, 0x03	; 3
 17c:	d4 f4       	brge	.+52     	; 0x1b2 <_Z8blinkLedv+0x4a>

		digitalWrite(LED, HIGH);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	8d e0       	ldi	r24, 0x0D	; 13
 182:	0e 94 3a 02 	call	0x474	; 0x474 <digitalWrite>
		delay(500);
 186:	64 ef       	ldi	r22, 0xF4	; 244
 188:	71 e0       	ldi	r23, 0x01	; 1
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <delay>
		digitalWrite(LED, LOW);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	8d e0       	ldi	r24, 0x0D	; 13
 196:	0e 94 3a 02 	call	0x474	; 0x474 <digitalWrite>
		delay(500);
 19a:	64 ef       	ldi	r22, 0xF4	; 244
 19c:	71 e0       	ldi	r23, 0x01	; 1
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <delay>
	}
}

void blinkLed() {
	
	for (int i = 0; i < 3; i++) {
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	89 83       	std	Y+1, r24	; 0x01
 1b0:	e2 cf       	rjmp	.-60     	; 0x176 <_Z8blinkLedv+0xe>
		delay(500);
		digitalWrite(LED, LOW);
		delay(500);

	}
 1b2:	00 00       	nop
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <initVariant>:
 1be:	08 95       	ret

000001c0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 1c0:	0e 94 9a 01 	call	0x334	; 0x334 <init>

	initVariant();
 1c4:	0e 94 df 00 	call	0x1be	; 0x1be <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 1c8:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 1d0:	0e 94 87 00 	call	0x10e	; 0x10e <loop>
		if (serialEventRun) serialEventRun();
 1d4:	20 97       	sbiw	r28, 0x00	; 0
 1d6:	e1 f3       	breq	.-8      	; 0x1d0 <main+0x10>
 1d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 1dc:	f9 cf       	rjmp	.-14     	; 0x1d0 <main+0x10>

000001de <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 1f8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 1fc:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 200:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
 204:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_end>
 208:	23 e0       	ldi	r18, 0x03	; 3
 20a:	23 0f       	add	r18, r19
 20c:	2d 37       	cpi	r18, 0x7D	; 125
 20e:	20 f4       	brcc	.+8      	; 0x218 <__vector_16+0x3a>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	a1 1d       	adc	r26, r1
 214:	b1 1d       	adc	r27, r1
 216:	05 c0       	rjmp	.+10     	; 0x222 <__vector_16+0x44>
 218:	26 e8       	ldi	r18, 0x86	; 134
 21a:	23 0f       	add	r18, r19
 21c:	02 96       	adiw	r24, 0x02	; 2
 21e:	a1 1d       	adc	r26, r1
 220:	b1 1d       	adc	r27, r1
 222:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_end>
 226:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 22a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 22e:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 232:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 236:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 23a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 23e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 242:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	a1 1d       	adc	r26, r1
 24a:	b1 1d       	adc	r27, r1
 24c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 250:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 254:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 258:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <micros>:
 272:	3f b7       	in	r19, 0x3f	; 63
 274:	f8 94       	cli
 276:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 27a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 27e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 282:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 286:	26 b5       	in	r18, 0x26	; 38
 288:	a8 9b       	sbis	0x15, 0	; 21
 28a:	05 c0       	rjmp	.+10     	; 0x296 <micros+0x24>
 28c:	2f 3f       	cpi	r18, 0xFF	; 255
 28e:	19 f0       	breq	.+6      	; 0x296 <micros+0x24>
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	a1 1d       	adc	r26, r1
 294:	b1 1d       	adc	r27, r1
 296:	3f bf       	out	0x3f, r19	; 63
 298:	ba 2f       	mov	r27, r26
 29a:	a9 2f       	mov	r26, r25
 29c:	98 2f       	mov	r25, r24
 29e:	88 27       	eor	r24, r24
 2a0:	82 0f       	add	r24, r18
 2a2:	91 1d       	adc	r25, r1
 2a4:	a1 1d       	adc	r26, r1
 2a6:	b1 1d       	adc	r27, r1
 2a8:	bc 01       	movw	r22, r24
 2aa:	cd 01       	movw	r24, r26
 2ac:	42 e0       	ldi	r20, 0x02	; 2
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	88 1f       	adc	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	4a 95       	dec	r20
 2b8:	d1 f7       	brne	.-12     	; 0x2ae <micros+0x3c>
 2ba:	08 95       	ret

000002bc <delay>:
 2bc:	8f 92       	push	r8
 2be:	9f 92       	push	r9
 2c0:	af 92       	push	r10
 2c2:	bf 92       	push	r11
 2c4:	cf 92       	push	r12
 2c6:	df 92       	push	r13
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
 2cc:	6b 01       	movw	r12, r22
 2ce:	7c 01       	movw	r14, r24
 2d0:	0e 94 39 01 	call	0x272	; 0x272 <micros>
 2d4:	4b 01       	movw	r8, r22
 2d6:	5c 01       	movw	r10, r24
 2d8:	c1 14       	cp	r12, r1
 2da:	d1 04       	cpc	r13, r1
 2dc:	e1 04       	cpc	r14, r1
 2de:	f1 04       	cpc	r15, r1
 2e0:	01 f1       	breq	.+64     	; 0x322 <delay+0x66>
 2e2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <yield>
 2e6:	0e 94 39 01 	call	0x272	; 0x272 <micros>
 2ea:	dc 01       	movw	r26, r24
 2ec:	cb 01       	movw	r24, r22
 2ee:	88 19       	sub	r24, r8
 2f0:	99 09       	sbc	r25, r9
 2f2:	aa 09       	sbc	r26, r10
 2f4:	bb 09       	sbc	r27, r11
 2f6:	88 3e       	cpi	r24, 0xE8	; 232
 2f8:	93 40       	sbci	r25, 0x03	; 3
 2fa:	a1 05       	cpc	r26, r1
 2fc:	b1 05       	cpc	r27, r1
 2fe:	60 f3       	brcs	.-40     	; 0x2d8 <delay+0x1c>
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	c2 1a       	sub	r12, r18
 304:	d1 08       	sbc	r13, r1
 306:	e1 08       	sbc	r14, r1
 308:	f1 08       	sbc	r15, r1
 30a:	88 ee       	ldi	r24, 0xE8	; 232
 30c:	88 0e       	add	r8, r24
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	98 1e       	adc	r9, r24
 312:	a1 1c       	adc	r10, r1
 314:	b1 1c       	adc	r11, r1
 316:	c1 14       	cp	r12, r1
 318:	d1 04       	cpc	r13, r1
 31a:	e1 04       	cpc	r14, r1
 31c:	f1 04       	cpc	r15, r1
 31e:	19 f7       	brne	.-58     	; 0x2e6 <delay+0x2a>
 320:	db cf       	rjmp	.-74     	; 0x2d8 <delay+0x1c>
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	bf 90       	pop	r11
 32c:	af 90       	pop	r10
 32e:	9f 90       	pop	r9
 330:	8f 90       	pop	r8
 332:	08 95       	ret

00000334 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 334:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 336:	84 b5       	in	r24, 0x24	; 36
 338:	82 60       	ori	r24, 0x02	; 2
 33a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 33c:	84 b5       	in	r24, 0x24	; 36
 33e:	81 60       	ori	r24, 0x01	; 1
 340:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 342:	85 b5       	in	r24, 0x25	; 37
 344:	82 60       	ori	r24, 0x02	; 2
 346:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 348:	85 b5       	in	r24, 0x25	; 37
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 34e:	ee e6       	ldi	r30, 0x6E	; 110
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	81 60       	ori	r24, 0x01	; 1
 356:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 358:	e1 e8       	ldi	r30, 0x81	; 129
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 35e:	80 81       	ld	r24, Z
 360:	82 60       	ori	r24, 0x02	; 2
 362:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 364:	80 81       	ld	r24, Z
 366:	81 60       	ori	r24, 0x01	; 1
 368:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 36a:	e0 e8       	ldi	r30, 0x80	; 128
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	81 60       	ori	r24, 0x01	; 1
 372:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 374:	e1 eb       	ldi	r30, 0xB1	; 177
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	84 60       	ori	r24, 0x04	; 4
 37c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 37e:	e0 eb       	ldi	r30, 0xB0	; 176
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	81 60       	ori	r24, 0x01	; 1
 386:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 388:	ea e7       	ldi	r30, 0x7A	; 122
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 392:	80 81       	ld	r24, Z
 394:	82 60       	ori	r24, 0x02	; 2
 396:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 398:	80 81       	ld	r24, Z
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 39e:	80 81       	ld	r24, Z
 3a0:	80 68       	ori	r24, 0x80	; 128
 3a2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3a4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3a8:	08 95       	ret

000003aa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	81 f0       	breq	.+32     	; 0x3ce <turnOffPWM+0x24>
 3ae:	28 f4       	brcc	.+10     	; 0x3ba <turnOffPWM+0x10>
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	99 f0       	breq	.+38     	; 0x3da <turnOffPWM+0x30>
 3b4:	82 30       	cpi	r24, 0x02	; 2
 3b6:	a1 f0       	breq	.+40     	; 0x3e0 <turnOffPWM+0x36>
 3b8:	08 95       	ret
 3ba:	87 30       	cpi	r24, 0x07	; 7
 3bc:	a9 f0       	breq	.+42     	; 0x3e8 <turnOffPWM+0x3e>
 3be:	88 30       	cpi	r24, 0x08	; 8
 3c0:	b9 f0       	breq	.+46     	; 0x3f0 <turnOffPWM+0x46>
 3c2:	84 30       	cpi	r24, 0x04	; 4
 3c4:	d1 f4       	brne	.+52     	; 0x3fa <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 3c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 3ca:	8f 7d       	andi	r24, 0xDF	; 223
 3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 3ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 3d2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 3d4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 3d8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 3da:	84 b5       	in	r24, 0x24	; 36
 3dc:	8f 77       	andi	r24, 0x7F	; 127
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 3e0:	84 b5       	in	r24, 0x24	; 36
 3e2:	8f 7d       	andi	r24, 0xDF	; 223
 3e4:	84 bd       	out	0x24, r24	; 36
 3e6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 3e8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 3ec:	8f 77       	andi	r24, 0x7F	; 127
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 3f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 3f4:	8f 7d       	andi	r24, 0xDF	; 223
 3f6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 3fa:	08 95       	ret

000003fc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	fc 01       	movw	r30, r24
 404:	e4 58       	subi	r30, 0x84	; 132
 406:	ff 4f       	sbci	r31, 0xFF	; 255
 408:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 40a:	fc 01       	movw	r30, r24
 40c:	e0 57       	subi	r30, 0x70	; 112
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 412:	88 23       	and	r24, r24
 414:	61 f1       	breq	.+88     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	fc 01       	movw	r30, r24
 41e:	e2 55       	subi	r30, 0x52	; 82
 420:	ff 4f       	sbci	r31, 0xFF	; 255
 422:	c5 91       	lpm	r28, Z+
 424:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 426:	fc 01       	movw	r30, r24
 428:	ec 55       	subi	r30, 0x5C	; 92
 42a:	ff 4f       	sbci	r31, 0xFF	; 255
 42c:	a5 91       	lpm	r26, Z+
 42e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 430:	61 11       	cpse	r22, r1
 432:	09 c0       	rjmp	.+18     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		uint8_t oldSREG = SREG;
 434:	9f b7       	in	r25, 0x3f	; 63
                cli();
 436:	f8 94       	cli
		*reg &= ~bit;
 438:	88 81       	ld	r24, Y
 43a:	20 95       	com	r18
 43c:	82 23       	and	r24, r18
 43e:	88 83       	st	Y, r24
		*out &= ~bit;
 440:	ec 91       	ld	r30, X
 442:	2e 23       	and	r18, r30
 444:	0b c0       	rjmp	.+22     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 446:	62 30       	cpi	r22, 0x02	; 2
 448:	61 f4       	brne	.+24     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		uint8_t oldSREG = SREG;
 44a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 44c:	f8 94       	cli
		*reg &= ~bit;
 44e:	88 81       	ld	r24, Y
 450:	32 2f       	mov	r19, r18
 452:	30 95       	com	r19
 454:	83 23       	and	r24, r19
 456:	88 83       	st	Y, r24
		*out |= bit;
 458:	ec 91       	ld	r30, X
 45a:	2e 2b       	or	r18, r30
 45c:	2c 93       	st	X, r18
		SREG = oldSREG;
 45e:	9f bf       	out	0x3f, r25	; 63
 460:	06 c0       	rjmp	.+12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	} else {
		uint8_t oldSREG = SREG;
 462:	8f b7       	in	r24, 0x3f	; 63
                cli();
 464:	f8 94       	cli
		*reg |= bit;
 466:	e8 81       	ld	r30, Y
 468:	2e 2b       	or	r18, r30
 46a:	28 83       	st	Y, r18
		SREG = oldSREG;
 46c:	8f bf       	out	0x3f, r24	; 63
	}
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	f9 01       	movw	r30, r18
 480:	e8 59       	subi	r30, 0x98	; 152
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 486:	f9 01       	movw	r30, r18
 488:	e4 58       	subi	r30, 0x84	; 132
 48a:	ff 4f       	sbci	r31, 0xFF	; 255
 48c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 48e:	f9 01       	movw	r30, r18
 490:	e0 57       	subi	r30, 0x70	; 112
 492:	ff 4f       	sbci	r31, 0xFF	; 255
 494:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 496:	cc 23       	and	r28, r28
 498:	c1 f0       	breq	.+48     	; 0x4ca <digitalWrite+0x56>
 49a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 49c:	81 11       	cpse	r24, r1
 49e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <turnOffPWM>

	out = portOutputRegister(port);
 4a2:	ec 2f       	mov	r30, r28
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	ec 55       	subi	r30, 0x5C	; 92
 4ac:	ff 4f       	sbci	r31, 0xFF	; 255
 4ae:	a5 91       	lpm	r26, Z+
 4b0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 4b2:	9f b7       	in	r25, 0x3f	; 63
	cli();
 4b4:	f8 94       	cli

	if (val == LOW) {
 4b6:	11 11       	cpse	r17, r1
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <digitalWrite+0x4e>
		*out &= ~bit;
 4ba:	8c 91       	ld	r24, X
 4bc:	d0 95       	com	r29
 4be:	d8 23       	and	r29, r24
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <digitalWrite+0x52>
	} else {
		*out |= bit;
 4c2:	ec 91       	ld	r30, X
 4c4:	de 2b       	or	r29, r30
 4c6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 4c8:	9f bf       	out	0x3f, r25	; 63
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	08 95       	ret

000004d2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 4d2:	08 95       	ret

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
