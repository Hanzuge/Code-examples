
Exercise4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000005c4  00000658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800106  00800106  0000065e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000174a  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba4  00000000  00000000  00001f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b00  00000000  00000000  00002b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  00003608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000874  00000000  00000000  00003908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000abe  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004c3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_1>
   8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_2>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	e4 ec       	ldi	r30, 0xC4	; 196
  cc:	f5 e0       	ldi	r31, 0x05	; 5
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a6 30       	cpi	r26, 0x06	; 6
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a6 e0       	ldi	r26, 0x06	; 6
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	af 30       	cpi	r26, 0x0F	; 15
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  ee:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <_Z12blinkRedLED1v>:
volatile boolean greenOutput = HIGH;
volatile boolean yellowOutput = HIGH;

// Blinking red LED1 opposite to green LED and changing green LED to HIGH/LOW
void blinkRedLED1() {
	greenOutput = !greenOutput;
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <greenOutput>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	89 27       	eor	r24, r25
  fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <greenOutput>
	digitalWrite(REDLED1, greenOutput);
 102:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <greenOutput>
 106:	87 e0       	ldi	r24, 0x07	; 7
 108:	0c 94 b0 02 	jmp	0x560	; 0x560 <digitalWrite>

0000010c <_Z12blinkRedLED2v>:
}

// Blinking red LED2 at the same time as yellow LED and changing yellow LED to HIGH/LOW
void blinkRedLED2() {
	digitalWrite(REDLED2, yellowOutput);
 10c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	0e 94 b0 02 	call	0x560	; 0x560 <digitalWrite>
	yellowOutput = !yellowOutput;
 116:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	89 27       	eor	r24, r25
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 122:	08 95       	ret

00000124 <setup>:
}

void setup() {
	pinMode(GREENLED, OUTPUT);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 74 02 	call	0x4e8	; 0x4e8 <pinMode>
	pinMode(REDLED1, OUTPUT);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	87 e0       	ldi	r24, 0x07	; 7
 130:	0e 94 74 02 	call	0x4e8	; 0x4e8 <pinMode>
	pinMode(YELLOWLED, OUTPUT);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 74 02 	call	0x4e8	; 0x4e8 <pinMode>
	pinMode(REDLED2, OUTPUT);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	0e 94 74 02 	call	0x4e8	; 0x4e8 <pinMode>
	attachInterrupt(digitalPinToInterrupt(GREENLED), blinkRedLED1, CHANGE);
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	6b e7       	ldi	r22, 0x7B	; 123
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <attachInterrupt>
	attachInterrupt(digitalPinToInterrupt(YELLOWLED), blinkRedLED2, CHANGE);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	66 e8       	ldi	r22, 0x86	; 134
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <attachInterrupt>

00000160 <loop>:
}

void loop() {
	// Green led blinking on/off in 1 second delay and yellow led on/off in 0,5 second delay
	digitalWrite(GREENLED, greenOutput);
 160:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <greenOutput>
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 b0 02 	call	0x560	; 0x560 <digitalWrite>
	digitalWrite(YELLOWLED, yellowOutput);
 16a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	0e 94 b0 02 	call	0x560	; 0x560 <digitalWrite>
	delay(500);
 174:	64 ef       	ldi	r22, 0xF4	; 244
 176:	71 e0       	ldi	r23, 0x01	; 1
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <delay>
	digitalWrite(YELLOWLED, yellowOutput);
 180:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	0e 94 b0 02 	call	0x560	; 0x560 <digitalWrite>
	delay(500);
 18a:	64 ef       	ldi	r22, 0xF4	; 244
 18c:	71 e0       	ldi	r23, 0x01	; 1
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <delay>
	digitalWrite(GREENLED, greenOutput);
 196:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <greenOutput>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 b0 02 	call	0x560	; 0x560 <digitalWrite>
	digitalWrite(YELLOWLED, yellowOutput);
 1a0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	0e 94 b0 02 	call	0x560	; 0x560 <digitalWrite>
	delay(500);
 1aa:	64 ef       	ldi	r22, 0xF4	; 244
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <delay>
	digitalWrite(YELLOWLED, yellowOutput);
 1b6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	0e 94 b0 02 	call	0x560	; 0x560 <digitalWrite>
	delay(500);
 1c0:	64 ef       	ldi	r22, 0xF4	; 244
 1c2:	71 e0       	ldi	r23, 0x01	; 1
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <delay>

000001cc <initVariant>:
 1cc:	08 95       	ret

000001ce <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 1ce:	0e 94 10 02 	call	0x420	; 0x420 <init>

	initVariant();
 1d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 1d6:	0e 94 92 00 	call	0x124	; 0x124 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1da:	c0 e0       	ldi	r28, 0x00	; 0
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 1de:	0e 94 b0 00 	call	0x160	; 0x160 <loop>
		if (serialEventRun) serialEventRun();
 1e2:	20 97       	sbiw	r28, 0x00	; 0
 1e4:	e1 f3       	breq	.-8      	; 0x1de <main+0x10>
 1e6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 1ea:	f9 cf       	rjmp	.-14     	; 0x1de <main+0x10>

000001ec <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
 1ec:	08 95       	ret

000001ee <attachInterrupt>:
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	e8 f4       	brcc	.+58     	; 0x22c <attachInterrupt+0x3e>
 1f2:	e8 2f       	mov	r30, r24
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	ee 5f       	subi	r30, 0xFE	; 254
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	71 83       	std	Z+1, r23	; 0x01
 200:	60 83       	st	Z, r22
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	41 f0       	breq	.+16     	; 0x216 <attachInterrupt+0x28>
 206:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 20a:	8c 7f       	andi	r24, 0xFC	; 252
 20c:	48 2b       	or	r20, r24
 20e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 212:	e8 9a       	sbi	0x1d, 0	; 29
 214:	08 95       	ret
 216:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 21a:	83 7f       	andi	r24, 0xF3	; 243
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	48 2b       	or	r20, r24
 226:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 22a:	e9 9a       	sbi	0x1d, 1	; 29
 22c:	08 95       	ret

0000022e <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
 250:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <intFunc>
 254:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <intFunc+0x1>
 258:	09 95       	icall
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
 29e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <intFunc+0x2>
 2a2:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <intFunc+0x3>
 2a6:	09 95       	icall
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timer0_millis>
 2e4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timer0_millis+0x1>
 2e8:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timer0_millis+0x2>
 2ec:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timer0_millis+0x3>
 2f0:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__data_end>
 2f4:	23 e0       	ldi	r18, 0x03	; 3
 2f6:	23 0f       	add	r18, r19
 2f8:	2d 37       	cpi	r18, 0x7D	; 125
 2fa:	20 f4       	brcc	.+8      	; 0x304 <__vector_16+0x3a>
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	a1 1d       	adc	r26, r1
 300:	b1 1d       	adc	r27, r1
 302:	05 c0       	rjmp	.+10     	; 0x30e <__vector_16+0x44>
 304:	26 e8       	ldi	r18, 0x86	; 134
 306:	23 0f       	add	r18, r19
 308:	02 96       	adiw	r24, 0x02	; 2
 30a:	a1 1d       	adc	r26, r1
 30c:	b1 1d       	adc	r27, r1
 30e:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 312:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timer0_millis>
 316:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timer0_millis+0x1>
 31a:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timer0_millis+0x2>
 31e:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timer0_millis+0x3>
 322:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 326:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 32a:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 32e:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	a1 1d       	adc	r26, r1
 336:	b1 1d       	adc	r27, r1
 338:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timer0_overflow_count>
 33c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <timer0_overflow_count+0x1>
 340:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <timer0_overflow_count+0x2>
 344:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <timer0_overflow_count+0x3>
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <micros>:
 35e:	3f b7       	in	r19, 0x3f	; 63
 360:	f8 94       	cli
 362:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 366:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 36a:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 36e:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 372:	26 b5       	in	r18, 0x26	; 38
 374:	a8 9b       	sbis	0x15, 0	; 21
 376:	05 c0       	rjmp	.+10     	; 0x382 <micros+0x24>
 378:	2f 3f       	cpi	r18, 0xFF	; 255
 37a:	19 f0       	breq	.+6      	; 0x382 <micros+0x24>
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	a1 1d       	adc	r26, r1
 380:	b1 1d       	adc	r27, r1
 382:	3f bf       	out	0x3f, r19	; 63
 384:	ba 2f       	mov	r27, r26
 386:	a9 2f       	mov	r26, r25
 388:	98 2f       	mov	r25, r24
 38a:	88 27       	eor	r24, r24
 38c:	82 0f       	add	r24, r18
 38e:	91 1d       	adc	r25, r1
 390:	a1 1d       	adc	r26, r1
 392:	b1 1d       	adc	r27, r1
 394:	bc 01       	movw	r22, r24
 396:	cd 01       	movw	r24, r26
 398:	42 e0       	ldi	r20, 0x02	; 2
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	88 1f       	adc	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	4a 95       	dec	r20
 3a4:	d1 f7       	brne	.-12     	; 0x39a <micros+0x3c>
 3a6:	08 95       	ret

000003a8 <delay>:
 3a8:	8f 92       	push	r8
 3aa:	9f 92       	push	r9
 3ac:	af 92       	push	r10
 3ae:	bf 92       	push	r11
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	6b 01       	movw	r12, r22
 3ba:	7c 01       	movw	r14, r24
 3bc:	0e 94 af 01 	call	0x35e	; 0x35e <micros>
 3c0:	4b 01       	movw	r8, r22
 3c2:	5c 01       	movw	r10, r24
 3c4:	c1 14       	cp	r12, r1
 3c6:	d1 04       	cpc	r13, r1
 3c8:	e1 04       	cpc	r14, r1
 3ca:	f1 04       	cpc	r15, r1
 3cc:	01 f1       	breq	.+64     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3ce:	0e 94 df 02 	call	0x5be	; 0x5be <yield>
 3d2:	0e 94 af 01 	call	0x35e	; 0x35e <micros>
 3d6:	dc 01       	movw	r26, r24
 3d8:	cb 01       	movw	r24, r22
 3da:	88 19       	sub	r24, r8
 3dc:	99 09       	sbc	r25, r9
 3de:	aa 09       	sbc	r26, r10
 3e0:	bb 09       	sbc	r27, r11
 3e2:	88 3e       	cpi	r24, 0xE8	; 232
 3e4:	93 40       	sbci	r25, 0x03	; 3
 3e6:	a1 05       	cpc	r26, r1
 3e8:	b1 05       	cpc	r27, r1
 3ea:	60 f3       	brcs	.-40     	; 0x3c4 <delay+0x1c>
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	c2 1a       	sub	r12, r18
 3f0:	d1 08       	sbc	r13, r1
 3f2:	e1 08       	sbc	r14, r1
 3f4:	f1 08       	sbc	r15, r1
 3f6:	88 ee       	ldi	r24, 0xE8	; 232
 3f8:	88 0e       	add	r8, r24
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	98 1e       	adc	r9, r24
 3fe:	a1 1c       	adc	r10, r1
 400:	b1 1c       	adc	r11, r1
 402:	c1 14       	cp	r12, r1
 404:	d1 04       	cpc	r13, r1
 406:	e1 04       	cpc	r14, r1
 408:	f1 04       	cpc	r15, r1
 40a:	19 f7       	brne	.-58     	; 0x3d2 <delay+0x2a>
 40c:	db cf       	rjmp	.-74     	; 0x3c4 <delay+0x1c>
 40e:	ff 90       	pop	r15
 410:	ef 90       	pop	r14
 412:	df 90       	pop	r13
 414:	cf 90       	pop	r12
 416:	bf 90       	pop	r11
 418:	af 90       	pop	r10
 41a:	9f 90       	pop	r9
 41c:	8f 90       	pop	r8
 41e:	08 95       	ret

00000420 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 420:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 422:	84 b5       	in	r24, 0x24	; 36
 424:	82 60       	ori	r24, 0x02	; 2
 426:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 428:	84 b5       	in	r24, 0x24	; 36
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 42e:	85 b5       	in	r24, 0x25	; 37
 430:	82 60       	ori	r24, 0x02	; 2
 432:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 434:	85 b5       	in	r24, 0x25	; 37
 436:	81 60       	ori	r24, 0x01	; 1
 438:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 43a:	ee e6       	ldi	r30, 0x6E	; 110
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	81 60       	ori	r24, 0x01	; 1
 442:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 444:	e1 e8       	ldi	r30, 0x81	; 129
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 44a:	80 81       	ld	r24, Z
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 450:	80 81       	ld	r24, Z
 452:	81 60       	ori	r24, 0x01	; 1
 454:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 456:	e0 e8       	ldi	r30, 0x80	; 128
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	81 60       	ori	r24, 0x01	; 1
 45e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 460:	e1 eb       	ldi	r30, 0xB1	; 177
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	84 60       	ori	r24, 0x04	; 4
 468:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 46a:	e0 eb       	ldi	r30, 0xB0	; 176
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	81 60       	ori	r24, 0x01	; 1
 472:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 474:	ea e7       	ldi	r30, 0x7A	; 122
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	84 60       	ori	r24, 0x04	; 4
 47c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 47e:	80 81       	ld	r24, Z
 480:	82 60       	ori	r24, 0x02	; 2
 482:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 484:	80 81       	ld	r24, Z
 486:	81 60       	ori	r24, 0x01	; 1
 488:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 48a:	80 81       	ld	r24, Z
 48c:	80 68       	ori	r24, 0x80	; 128
 48e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 490:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 494:	08 95       	ret

00000496 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 496:	83 30       	cpi	r24, 0x03	; 3
 498:	81 f0       	breq	.+32     	; 0x4ba <turnOffPWM+0x24>
 49a:	28 f4       	brcc	.+10     	; 0x4a6 <turnOffPWM+0x10>
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	99 f0       	breq	.+38     	; 0x4c6 <turnOffPWM+0x30>
 4a0:	82 30       	cpi	r24, 0x02	; 2
 4a2:	a1 f0       	breq	.+40     	; 0x4cc <turnOffPWM+0x36>
 4a4:	08 95       	ret
 4a6:	87 30       	cpi	r24, 0x07	; 7
 4a8:	a9 f0       	breq	.+42     	; 0x4d4 <turnOffPWM+0x3e>
 4aa:	88 30       	cpi	r24, 0x08	; 8
 4ac:	b9 f0       	breq	.+46     	; 0x4dc <turnOffPWM+0x46>
 4ae:	84 30       	cpi	r24, 0x04	; 4
 4b0:	d1 f4       	brne	.+52     	; 0x4e6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4b2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4b6:	8f 7d       	andi	r24, 0xDF	; 223
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 4ba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4be:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4c0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4c4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 4c6:	84 b5       	in	r24, 0x24	; 36
 4c8:	8f 77       	andi	r24, 0x7F	; 127
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 4cc:	84 b5       	in	r24, 0x24	; 36
 4ce:	8f 7d       	andi	r24, 0xDF	; 223
 4d0:	84 bd       	out	0x24, r24	; 36
 4d2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 4d4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4d8:	8f 77       	andi	r24, 0x7F	; 127
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 4dc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4e0:	8f 7d       	andi	r24, 0xDF	; 223
 4e2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4e6:	08 95       	ret

000004e8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	fc 01       	movw	r30, r24
 4f0:	e4 58       	subi	r30, 0x84	; 132
 4f2:	ff 4f       	sbci	r31, 0xFF	; 255
 4f4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 4f6:	fc 01       	movw	r30, r24
 4f8:	e0 57       	subi	r30, 0x70	; 112
 4fa:	ff 4f       	sbci	r31, 0xFF	; 255
 4fc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 4fe:	88 23       	and	r24, r24
 500:	61 f1       	breq	.+88     	; 0x55a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	fc 01       	movw	r30, r24
 50a:	e2 55       	subi	r30, 0x52	; 82
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	c5 91       	lpm	r28, Z+
 510:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 512:	fc 01       	movw	r30, r24
 514:	ec 55       	subi	r30, 0x5C	; 92
 516:	ff 4f       	sbci	r31, 0xFF	; 255
 518:	a5 91       	lpm	r26, Z+
 51a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 51c:	61 11       	cpse	r22, r1
 51e:	09 c0       	rjmp	.+18     	; 0x532 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 520:	9f b7       	in	r25, 0x3f	; 63
                cli();
 522:	f8 94       	cli
		*reg &= ~bit;
 524:	88 81       	ld	r24, Y
 526:	20 95       	com	r18
 528:	82 23       	and	r24, r18
 52a:	88 83       	st	Y, r24
		*out &= ~bit;
 52c:	ec 91       	ld	r30, X
 52e:	2e 23       	and	r18, r30
 530:	0b c0       	rjmp	.+22     	; 0x548 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 532:	62 30       	cpi	r22, 0x02	; 2
 534:	61 f4       	brne	.+24     	; 0x54e <pinMode+0x66>
		uint8_t oldSREG = SREG;
 536:	9f b7       	in	r25, 0x3f	; 63
                cli();
 538:	f8 94       	cli
		*reg &= ~bit;
 53a:	88 81       	ld	r24, Y
 53c:	32 2f       	mov	r19, r18
 53e:	30 95       	com	r19
 540:	83 23       	and	r24, r19
 542:	88 83       	st	Y, r24
		*out |= bit;
 544:	ec 91       	ld	r30, X
 546:	2e 2b       	or	r18, r30
 548:	2c 93       	st	X, r18
		SREG = oldSREG;
 54a:	9f bf       	out	0x3f, r25	; 63
 54c:	06 c0       	rjmp	.+12     	; 0x55a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 54e:	8f b7       	in	r24, 0x3f	; 63
                cli();
 550:	f8 94       	cli
		*reg |= bit;
 552:	e8 81       	ld	r30, Y
 554:	2e 2b       	or	r18, r30
 556:	28 83       	st	Y, r18
		SREG = oldSREG;
 558:	8f bf       	out	0x3f, r24	; 63
	}
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	f9 01       	movw	r30, r18
 56c:	e8 59       	subi	r30, 0x98	; 152
 56e:	ff 4f       	sbci	r31, 0xFF	; 255
 570:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 572:	f9 01       	movw	r30, r18
 574:	e4 58       	subi	r30, 0x84	; 132
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 57a:	f9 01       	movw	r30, r18
 57c:	e0 57       	subi	r30, 0x70	; 112
 57e:	ff 4f       	sbci	r31, 0xFF	; 255
 580:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 582:	cc 23       	and	r28, r28
 584:	c1 f0       	breq	.+48     	; 0x5b6 <digitalWrite+0x56>
 586:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 588:	81 11       	cpse	r24, r1
 58a:	0e 94 4b 02 	call	0x496	; 0x496 <turnOffPWM>

	out = portOutputRegister(port);
 58e:	ec 2f       	mov	r30, r28
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	ee 0f       	add	r30, r30
 594:	ff 1f       	adc	r31, r31
 596:	ec 55       	subi	r30, 0x5C	; 92
 598:	ff 4f       	sbci	r31, 0xFF	; 255
 59a:	a5 91       	lpm	r26, Z+
 59c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 59e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 5a0:	f8 94       	cli

	if (val == LOW) {
 5a2:	11 11       	cpse	r17, r1
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <digitalWrite+0x4e>
		*out &= ~bit;
 5a6:	8c 91       	ld	r24, X
 5a8:	d0 95       	com	r29
 5aa:	d8 23       	and	r29, r24
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <digitalWrite+0x52>
	} else {
		*out |= bit;
 5ae:	ec 91       	ld	r30, X
 5b0:	de 2b       	or	r29, r30
 5b2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 5b4:	9f bf       	out	0x3f, r25	; 63
}
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	08 95       	ret

000005be <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 5be:	08 95       	ret

000005c0 <_exit>:
 5c0:	f8 94       	cli

000005c2 <__stop_program>:
 5c2:	ff cf       	rjmp	.-2      	; 0x5c2 <__stop_program>
