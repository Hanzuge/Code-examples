
Exercise4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005ea  0000067e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  00000682  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000682  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000173b  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bba  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca0  00000000  00000000  00002b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  000037d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000856  00000000  00000000  00003adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae0  00000000  00000000  00004332  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004e12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_1>
   8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_2>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	ea ee       	ldi	r30, 0xEA	; 234
  cc:	f5 e0       	ldi	r31, 0x05	; 5
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a4 30       	cpi	r26, 0x04	; 4
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a4 e0       	ldi	r26, 0x04	; 4
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	af 30       	cpi	r26, 0x0F	; 15
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  ee:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <_Z10greenLedOnv>:

volatile boolean greenOutput = LOW;
volatile boolean yellowOutput = LOW;

void greenLedOn() {
	greenOutput = !greenOutput;
  f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <greenOutput>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	98 27       	eor	r25, r24
  fe:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <greenOutput>
	yellowOutput = !yellowOutput;
 102:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_end>
 106:	89 27       	eor	r24, r25
 108:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 10c:	08 95       	ret

0000010e <_Z11yellowLedOnv>:
}

void yellowLedOn() {
	yellowOutput = !yellowOutput;
 10e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_end>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	89 27       	eor	r24, r25
 116:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 11a:	08 95       	ret

0000011c <setup>:
}

void setup() {
	// initialize the digital pin1-3 as an outputs.
	pinMode(REDLED, OUTPUT);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 87 02 	call	0x50e	; 0x50e <pinMode>
	pinMode(YELLOWLED, OUTPUT);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 87 02 	call	0x50e	; 0x50e <pinMode>
	pinMode(GREENLED, OUTPUT);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 87 02 	call	0x50e	; 0x50e <pinMode>
	attachInterrupt(digitalPinToInterrupt(REDLED), greenLedOn, FALLING);
 134:	42 e0       	ldi	r20, 0x02	; 2
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	6b e7       	ldi	r22, 0x7B	; 123
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 0a 01 	call	0x214	; 0x214 <attachInterrupt>
	attachInterrupt(digitalPinToInterrupt(GREENLED), yellowLedOn, FALLING);
 142:	42 e0       	ldi	r20, 0x02	; 2
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	67 e8       	ldi	r22, 0x87	; 135
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <attachInterrupt>

00000150 <loop>:
}

void loop() {
 150:	cf 93       	push	r28
	digitalWrite(YELLOWLED, yellowOutput);
 152:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 c3 02 	call	0x586	; 0x586 <digitalWrite>
	digitalWrite(REDLED, HIGH);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 c3 02 	call	0x586	; 0x586 <digitalWrite>
	delay(2000);
 164:	60 ed       	ldi	r22, 0xD0	; 208
 166:	77 e0       	ldi	r23, 0x07	; 7
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <delay>
	yellowOutput = !yellowOutput;
 170:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 174:	c1 e0       	ldi	r28, 0x01	; 1
 176:	8c 27       	eor	r24, r28
 178:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	digitalWrite(YELLOWLED, yellowOutput);
 17c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 c3 02 	call	0x586	; 0x586 <digitalWrite>
	delay(1000);
 186:	68 ee       	ldi	r22, 0xE8	; 232
 188:	73 e0       	ldi	r23, 0x03	; 3
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <delay>
	digitalWrite(REDLED, LOW);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 c3 02 	call	0x586	; 0x586 <digitalWrite>
	digitalWrite(YELLOWLED, yellowOutput);
 19a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 c3 02 	call	0x586	; 0x586 <digitalWrite>
	digitalWrite(GREENLED, greenOutput);
 1a4:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <greenOutput>
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	0e 94 c3 02 	call	0x586	; 0x586 <digitalWrite>
	delay(2000);
 1ae:	60 ed       	ldi	r22, 0xD0	; 208
 1b0:	77 e0       	ldi	r23, 0x07	; 7
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <delay>
	greenOutput = !greenOutput;
 1ba:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <greenOutput>
 1be:	8c 27       	eor	r24, r28
 1c0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <greenOutput>
	digitalWrite(GREENLED, greenOutput);
 1c4:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <greenOutput>
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	0e 94 c3 02 	call	0x586	; 0x586 <digitalWrite>
	digitalWrite(YELLOWLED, yellowOutput);
 1ce:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 c3 02 	call	0x586	; 0x586 <digitalWrite>
	delay(1000);
 1d8:	68 ee       	ldi	r22, 0xE8	; 232
 1da:	73 e0       	ldi	r23, 0x03	; 3
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <delay>
	yellowOutput = !yellowOutput;
 1e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1e8:	c8 27       	eor	r28, r24
 1ea:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <__data_end>
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <initVariant>:
 1f2:	08 95       	ret

000001f4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 1f4:	0e 94 23 02 	call	0x446	; 0x446 <init>

	initVariant();
 1f8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 204:	0e 94 a8 00 	call	0x150	; 0x150 <loop>
		if (serialEventRun) serialEventRun();
 208:	20 97       	sbiw	r28, 0x00	; 0
 20a:	e1 f3       	breq	.-8      	; 0x204 <main+0x10>
 20c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 210:	f9 cf       	rjmp	.-14     	; 0x204 <main+0x10>

00000212 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
 212:	08 95       	ret

00000214 <attachInterrupt>:
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	e8 f4       	brcc	.+58     	; 0x252 <attachInterrupt+0x3e>
 218:	e8 2f       	mov	r30, r24
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	e0 50       	subi	r30, 0x00	; 0
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	71 83       	std	Z+1, r23	; 0x01
 226:	60 83       	st	Z, r22
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	41 f0       	breq	.+16     	; 0x23c <attachInterrupt+0x28>
 22c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 230:	8c 7f       	andi	r24, 0xFC	; 252
 232:	48 2b       	or	r20, r24
 234:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 238:	e8 9a       	sbi	0x1d, 0	; 29
 23a:	08 95       	ret
 23c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 240:	83 7f       	andi	r24, 0xF3	; 243
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	44 0f       	add	r20, r20
 248:	55 1f       	adc	r21, r21
 24a:	48 2b       	or	r20, r24
 24c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 250:	e9 9a       	sbi	0x1d, 1	; 29
 252:	08 95       	ret

00000254 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
 276:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 27a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 27e:	09 95       	icall
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
 2c4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
 2c8:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
 2cc:	09 95       	icall
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timer0_millis>
 30a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timer0_millis+0x1>
 30e:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timer0_millis+0x2>
 312:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timer0_millis+0x3>
 316:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <timer0_fract>
 31a:	23 e0       	ldi	r18, 0x03	; 3
 31c:	23 0f       	add	r18, r19
 31e:	2d 37       	cpi	r18, 0x7D	; 125
 320:	20 f4       	brcc	.+8      	; 0x32a <__vector_16+0x3a>
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	a1 1d       	adc	r26, r1
 326:	b1 1d       	adc	r27, r1
 328:	05 c0       	rjmp	.+10     	; 0x334 <__vector_16+0x44>
 32a:	26 e8       	ldi	r18, 0x86	; 134
 32c:	23 0f       	add	r18, r19
 32e:	02 96       	adiw	r24, 0x02	; 2
 330:	a1 1d       	adc	r26, r1
 332:	b1 1d       	adc	r27, r1
 334:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <timer0_fract>
 338:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timer0_millis>
 33c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timer0_millis+0x1>
 340:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timer0_millis+0x2>
 344:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timer0_millis+0x3>
 348:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 34c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 350:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 354:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	a1 1d       	adc	r26, r1
 35c:	b1 1d       	adc	r27, r1
 35e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timer0_overflow_count>
 362:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <timer0_overflow_count+0x1>
 366:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <timer0_overflow_count+0x2>
 36a:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <timer0_overflow_count+0x3>
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <micros>:
 384:	3f b7       	in	r19, 0x3f	; 63
 386:	f8 94       	cli
 388:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 38c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 390:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 394:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 398:	26 b5       	in	r18, 0x26	; 38
 39a:	a8 9b       	sbis	0x15, 0	; 21
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <micros+0x24>
 39e:	2f 3f       	cpi	r18, 0xFF	; 255
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <micros+0x24>
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	a1 1d       	adc	r26, r1
 3a6:	b1 1d       	adc	r27, r1
 3a8:	3f bf       	out	0x3f, r19	; 63
 3aa:	ba 2f       	mov	r27, r26
 3ac:	a9 2f       	mov	r26, r25
 3ae:	98 2f       	mov	r25, r24
 3b0:	88 27       	eor	r24, r24
 3b2:	82 0f       	add	r24, r18
 3b4:	91 1d       	adc	r25, r1
 3b6:	a1 1d       	adc	r26, r1
 3b8:	b1 1d       	adc	r27, r1
 3ba:	bc 01       	movw	r22, r24
 3bc:	cd 01       	movw	r24, r26
 3be:	42 e0       	ldi	r20, 0x02	; 2
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	4a 95       	dec	r20
 3ca:	d1 f7       	brne	.-12     	; 0x3c0 <micros+0x3c>
 3cc:	08 95       	ret

000003ce <delay>:
 3ce:	8f 92       	push	r8
 3d0:	9f 92       	push	r9
 3d2:	af 92       	push	r10
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	6b 01       	movw	r12, r22
 3e0:	7c 01       	movw	r14, r24
 3e2:	0e 94 c2 01 	call	0x384	; 0x384 <micros>
 3e6:	4b 01       	movw	r8, r22
 3e8:	5c 01       	movw	r10, r24
 3ea:	c1 14       	cp	r12, r1
 3ec:	d1 04       	cpc	r13, r1
 3ee:	e1 04       	cpc	r14, r1
 3f0:	f1 04       	cpc	r15, r1
 3f2:	01 f1       	breq	.+64     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3f4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <yield>
 3f8:	0e 94 c2 01 	call	0x384	; 0x384 <micros>
 3fc:	dc 01       	movw	r26, r24
 3fe:	cb 01       	movw	r24, r22
 400:	88 19       	sub	r24, r8
 402:	99 09       	sbc	r25, r9
 404:	aa 09       	sbc	r26, r10
 406:	bb 09       	sbc	r27, r11
 408:	88 3e       	cpi	r24, 0xE8	; 232
 40a:	93 40       	sbci	r25, 0x03	; 3
 40c:	a1 05       	cpc	r26, r1
 40e:	b1 05       	cpc	r27, r1
 410:	60 f3       	brcs	.-40     	; 0x3ea <delay+0x1c>
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	c2 1a       	sub	r12, r18
 416:	d1 08       	sbc	r13, r1
 418:	e1 08       	sbc	r14, r1
 41a:	f1 08       	sbc	r15, r1
 41c:	88 ee       	ldi	r24, 0xE8	; 232
 41e:	88 0e       	add	r8, r24
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	98 1e       	adc	r9, r24
 424:	a1 1c       	adc	r10, r1
 426:	b1 1c       	adc	r11, r1
 428:	c1 14       	cp	r12, r1
 42a:	d1 04       	cpc	r13, r1
 42c:	e1 04       	cpc	r14, r1
 42e:	f1 04       	cpc	r15, r1
 430:	19 f7       	brne	.-58     	; 0x3f8 <delay+0x2a>
 432:	db cf       	rjmp	.-74     	; 0x3ea <delay+0x1c>
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	bf 90       	pop	r11
 43e:	af 90       	pop	r10
 440:	9f 90       	pop	r9
 442:	8f 90       	pop	r8
 444:	08 95       	ret

00000446 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 446:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 448:	84 b5       	in	r24, 0x24	; 36
 44a:	82 60       	ori	r24, 0x02	; 2
 44c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 44e:	84 b5       	in	r24, 0x24	; 36
 450:	81 60       	ori	r24, 0x01	; 1
 452:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 454:	85 b5       	in	r24, 0x25	; 37
 456:	82 60       	ori	r24, 0x02	; 2
 458:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 45a:	85 b5       	in	r24, 0x25	; 37
 45c:	81 60       	ori	r24, 0x01	; 1
 45e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 460:	ee e6       	ldi	r30, 0x6E	; 110
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	81 60       	ori	r24, 0x01	; 1
 468:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 46a:	e1 e8       	ldi	r30, 0x81	; 129
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 470:	80 81       	ld	r24, Z
 472:	82 60       	ori	r24, 0x02	; 2
 474:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 476:	80 81       	ld	r24, Z
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 47c:	e0 e8       	ldi	r30, 0x80	; 128
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	81 60       	ori	r24, 0x01	; 1
 484:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 486:	e1 eb       	ldi	r30, 0xB1	; 177
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	84 60       	ori	r24, 0x04	; 4
 48e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 490:	e0 eb       	ldi	r30, 0xB0	; 176
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	81 60       	ori	r24, 0x01	; 1
 498:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 49a:	ea e7       	ldi	r30, 0x7A	; 122
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	84 60       	ori	r24, 0x04	; 4
 4a2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 4a4:	80 81       	ld	r24, Z
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 4aa:	80 81       	ld	r24, Z
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 4b0:	80 81       	ld	r24, Z
 4b2:	80 68       	ori	r24, 0x80	; 128
 4b4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4b6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4ba:	08 95       	ret

000004bc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	81 f0       	breq	.+32     	; 0x4e0 <turnOffPWM+0x24>
 4c0:	28 f4       	brcc	.+10     	; 0x4cc <turnOffPWM+0x10>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	99 f0       	breq	.+38     	; 0x4ec <turnOffPWM+0x30>
 4c6:	82 30       	cpi	r24, 0x02	; 2
 4c8:	a1 f0       	breq	.+40     	; 0x4f2 <turnOffPWM+0x36>
 4ca:	08 95       	ret
 4cc:	87 30       	cpi	r24, 0x07	; 7
 4ce:	a9 f0       	breq	.+42     	; 0x4fa <turnOffPWM+0x3e>
 4d0:	88 30       	cpi	r24, 0x08	; 8
 4d2:	b9 f0       	breq	.+46     	; 0x502 <turnOffPWM+0x46>
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	d1 f4       	brne	.+52     	; 0x50c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4d8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4dc:	8f 7d       	andi	r24, 0xDF	; 223
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 4e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4e4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4ea:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 4ec:	84 b5       	in	r24, 0x24	; 36
 4ee:	8f 77       	andi	r24, 0x7F	; 127
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 4f2:	84 b5       	in	r24, 0x24	; 36
 4f4:	8f 7d       	andi	r24, 0xDF	; 223
 4f6:	84 bd       	out	0x24, r24	; 36
 4f8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 4fa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4fe:	8f 77       	andi	r24, 0x7F	; 127
 500:	03 c0       	rjmp	.+6      	; 0x508 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 502:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 506:	8f 7d       	andi	r24, 0xDF	; 223
 508:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 50c:	08 95       	ret

0000050e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	e4 58       	subi	r30, 0x84	; 132
 518:	ff 4f       	sbci	r31, 0xFF	; 255
 51a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 51c:	fc 01       	movw	r30, r24
 51e:	e0 57       	subi	r30, 0x70	; 112
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 524:	88 23       	and	r24, r24
 526:	61 f1       	breq	.+88     	; 0x580 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	fc 01       	movw	r30, r24
 530:	e2 55       	subi	r30, 0x52	; 82
 532:	ff 4f       	sbci	r31, 0xFF	; 255
 534:	c5 91       	lpm	r28, Z+
 536:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 538:	fc 01       	movw	r30, r24
 53a:	ec 55       	subi	r30, 0x5C	; 92
 53c:	ff 4f       	sbci	r31, 0xFF	; 255
 53e:	a5 91       	lpm	r26, Z+
 540:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 542:	61 11       	cpse	r22, r1
 544:	09 c0       	rjmp	.+18     	; 0x558 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 546:	9f b7       	in	r25, 0x3f	; 63
                cli();
 548:	f8 94       	cli
		*reg &= ~bit;
 54a:	88 81       	ld	r24, Y
 54c:	20 95       	com	r18
 54e:	82 23       	and	r24, r18
 550:	88 83       	st	Y, r24
		*out &= ~bit;
 552:	ec 91       	ld	r30, X
 554:	2e 23       	and	r18, r30
 556:	0b c0       	rjmp	.+22     	; 0x56e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 558:	62 30       	cpi	r22, 0x02	; 2
 55a:	61 f4       	brne	.+24     	; 0x574 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 55c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 55e:	f8 94       	cli
		*reg &= ~bit;
 560:	88 81       	ld	r24, Y
 562:	32 2f       	mov	r19, r18
 564:	30 95       	com	r19
 566:	83 23       	and	r24, r19
 568:	88 83       	st	Y, r24
		*out |= bit;
 56a:	ec 91       	ld	r30, X
 56c:	2e 2b       	or	r18, r30
 56e:	2c 93       	st	X, r18
		SREG = oldSREG;
 570:	9f bf       	out	0x3f, r25	; 63
 572:	06 c0       	rjmp	.+12     	; 0x580 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 574:	8f b7       	in	r24, 0x3f	; 63
                cli();
 576:	f8 94       	cli
		*reg |= bit;
 578:	e8 81       	ld	r30, Y
 57a:	2e 2b       	or	r18, r30
 57c:	28 83       	st	Y, r18
		SREG = oldSREG;
 57e:	8f bf       	out	0x3f, r24	; 63
	}
}
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	e8 59       	subi	r30, 0x98	; 152
 594:	ff 4f       	sbci	r31, 0xFF	; 255
 596:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 598:	f9 01       	movw	r30, r18
 59a:	e4 58       	subi	r30, 0x84	; 132
 59c:	ff 4f       	sbci	r31, 0xFF	; 255
 59e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 5a0:	f9 01       	movw	r30, r18
 5a2:	e0 57       	subi	r30, 0x70	; 112
 5a4:	ff 4f       	sbci	r31, 0xFF	; 255
 5a6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 5a8:	cc 23       	and	r28, r28
 5aa:	c1 f0       	breq	.+48     	; 0x5dc <digitalWrite+0x56>
 5ac:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5ae:	81 11       	cpse	r24, r1
 5b0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <turnOffPWM>

	out = portOutputRegister(port);
 5b4:	ec 2f       	mov	r30, r28
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	ec 55       	subi	r30, 0x5C	; 92
 5be:	ff 4f       	sbci	r31, 0xFF	; 255
 5c0:	a5 91       	lpm	r26, Z+
 5c2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 5c4:	9f b7       	in	r25, 0x3f	; 63
	cli();
 5c6:	f8 94       	cli

	if (val == LOW) {
 5c8:	11 11       	cpse	r17, r1
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <digitalWrite+0x4e>
		*out &= ~bit;
 5cc:	8c 91       	ld	r24, X
 5ce:	d0 95       	com	r29
 5d0:	d8 23       	and	r29, r24
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <digitalWrite+0x52>
	} else {
		*out |= bit;
 5d4:	ec 91       	ld	r30, X
 5d6:	de 2b       	or	r29, r30
 5d8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 5da:	9f bf       	out	0x3f, r25	; 63
}
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	08 95       	ret

000005e4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 5e4:	08 95       	ret

000005e6 <_exit>:
 5e6:	f8 94       	cli

000005e8 <__stop_program>:
 5e8:	ff cf       	rjmp	.-2      	; 0x5e8 <__stop_program>
