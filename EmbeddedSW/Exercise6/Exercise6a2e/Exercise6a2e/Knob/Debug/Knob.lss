
Knob.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000c06  00000c9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800108  00800108  00000ca2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ca2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028d1  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000142e  00000000  00000000  00003845  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001361  00000000  00000000  00004c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  00005fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6c  00000000  00000000  0000666c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001871  00000000  00000000  000072d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008b49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_1>
   8:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_2>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__vector_11>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	33 01       	movw	r6, r6

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e6 e0       	ldi	r30, 0x06	; 6
  ce:	fc e0       	ldi	r31, 0x0C	; 12
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a8 30       	cpi	r26, 0x08	; 8
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a8 e0       	ldi	r26, 0x08	; 8
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	ae 33       	cpi	r26, 0x3E	; 62
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	cd e5       	ldi	r28, 0x5D	; 93
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	fe 01       	movw	r30, r28
  f8:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__tablejump2__>
  fc:	cc 35       	cpi	r28, 0x5C	; 92
  fe:	d1 07       	cpc	r29, r17
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 38 01 	call	0x270	; 0x270 <main>
 106:	0c 94 01 06 	jmp	0xc02	; 0xc02 <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_Z7ledsOffv>:
#define REDLED 1
#define GREENLED 3

// leds off
void ledsOff() {
	digitalWrite(REDLED, LOW);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 1e 03 	call	0x63c	; 0x63c <digitalWrite>
	digitalWrite(GREENLED, LOW);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0c 94 1e 03 	jmp	0x63c	; 0x63c <digitalWrite>

0000011e <_Z13blinkGreenLedi>:
}
// blinking green led
void blinkGreenLed(int delay1) {
 11e:	cf 92       	push	r12
 120:	df 92       	push	r13
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	6c 01       	movw	r12, r24
	digitalWrite(GREENLED, HIGH);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	0e 94 1e 03 	call	0x63c	; 0x63c <digitalWrite>
	delay(delay1);
 130:	0d 2c       	mov	r0, r13
 132:	00 0c       	add	r0, r0
 134:	ee 08       	sbc	r14, r14
 136:	ff 08       	sbc	r15, r15
 138:	c7 01       	movw	r24, r14
 13a:	b6 01       	movw	r22, r12
 13c:	0e 94 25 02 	call	0x44a	; 0x44a <delay>
	digitalWrite(GREENLED, LOW);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 1e 03 	call	0x63c	; 0x63c <digitalWrite>
	delay(delay1);
 148:	c7 01       	movw	r24, r14
 14a:	b6 01       	movw	r22, r12
}
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	df 90       	pop	r13
 152:	cf 90       	pop	r12
// blinking green led
void blinkGreenLed(int delay1) {
	digitalWrite(GREENLED, HIGH);
	delay(delay1);
	digitalWrite(GREENLED, LOW);
	delay(delay1);
 154:	0c 94 25 02 	jmp	0x44a	; 0x44a <delay>

00000158 <_Z11solidRedLedv>:
}
// red led on	
void solidRedLed() {
	digitalWrite(REDLED, HIGH);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0c 94 1e 03 	jmp	0x63c	; 0x63c <digitalWrite>

00000160 <_Z17changeButtonStatev>:
	buttonState = !buttonState;
}

// turning servo on
void mappedValueToOutputPin(int mappedValue) {
	myservo.write(mappedValue);
 160:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 164:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	23 2b       	or	r18, r19
 16e:	11 f0       	breq	.+4      	; 0x174 <_Z17changeButtonStatev+0x14>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 178:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 17c:	08 95       	ret

0000017e <setup>:
}
void setup() {
  myservo.attach(A2);  // attaches the servo on pin 9 to the servo object
 17e:	60 e1       	ldi	r22, 0x10	; 16
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	8c e0       	ldi	r24, 0x0C	; 12
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN5Servo6attachEi>
  attachInterrupt(digitalPinToInterrupt(BUTTONPIN), changeButtonState, RISING);
 18a:	43 e0       	ldi	r20, 0x03	; 3
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	60 eb       	ldi	r22, 0xB0	; 176
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0c 94 48 01 	jmp	0x290	; 0x290 <attachInterrupt>

00000198 <loop>:
}

void loop() {
 198:	af 92       	push	r10
 19a:	bf 92       	push	r11
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
	mappedValue = 0;
 1a8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mappedValue+0x1>
 1ac:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <mappedValue>
	// if button is pushed, get value from potentiometer, else turn led off
	if (buttonState == HIGH) {
 1b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1b4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	49 f4       	brne	.+18     	; 0x1ce <loop+0x36>
		mappedValue = analogRead(potpin);            // reads the value of the potentiometer (value between 0 and 1023)
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c0:	0e 94 9c 02 	call	0x538	; 0x538 <analogRead>
 1c4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <mappedValue+0x1>
 1c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mappedValue>
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <loop+0x42>
	}
	else {
		ledsOff();
 1ce:	0e 94 87 00 	call	0x10e	; 0x10e <_Z7ledsOffv>
		mappedValue = 0;
 1d2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mappedValue+0x1>
 1d6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <mappedValue>
	}
	// if potentiometer value is > 500, blink green led and turn servo on, else red led on
	if (mappedValue >= 501) {
 1da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <mappedValue>
 1de:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <mappedValue+0x1>
 1e2:	85 3f       	cpi	r24, 0xF5	; 245
 1e4:	91 40       	sbci	r25, 0x01	; 1
 1e6:	ac f1       	brlt	.+106    	; 0x252 <loop+0xba>
		ledsOff();
 1e8:	0e 94 87 00 	call	0x10e	; 0x10e <_Z7ledsOffv>
		blinkGreenLed(1000);
 1ec:	88 ee       	ldi	r24, 0xE8	; 232
 1ee:	93 e0       	ldi	r25, 0x03	; 3
 1f0:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13blinkGreenLedi>
		mappedValue = map(mappedValue, 0, 1023, 0, 180);     // scale it to use it with the servo (value between 0 and 180)
 1f4:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <mappedValue>
 1f8:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <mappedValue+0x1>
 1fc:	07 2e       	mov	r0, r23
 1fe:	00 0c       	add	r0, r0
 200:	88 0b       	sbc	r24, r24
 202:	99 0b       	sbc	r25, r25
 204:	1f 92       	push	r1
 206:	1f 92       	push	r1
 208:	1f 92       	push	r1
 20a:	24 eb       	ldi	r18, 0xB4	; 180
 20c:	2f 93       	push	r18
 20e:	a1 2c       	mov	r10, r1
 210:	b1 2c       	mov	r11, r1
 212:	65 01       	movw	r12, r10
 214:	ee 24       	eor	r14, r14
 216:	ea 94       	dec	r14
 218:	13 e0       	ldi	r17, 0x03	; 3
 21a:	f1 2e       	mov	r15, r17
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	10 e0       	ldi	r17, 0x00	; 0
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	a9 01       	movw	r20, r18
 226:	0e 94 4d 03 	call	0x69a	; 0x69a <_Z3maplllll>
 22a:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <mappedValue+0x1>
 22e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <mappedValue>
		myservo.write(mappedValue);                  // sets the servo position according to the scaled value
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	8c e0       	ldi	r24, 0x0C	; 12
 23c:	91 e0       	ldi	r25, 0x01	; 1
	}
	else {
		solidRedLed();
	}
}
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	bf 90       	pop	r11
 24c:	af 90       	pop	r10
	// if potentiometer value is > 500, blink green led and turn servo on, else red led on
	if (mappedValue >= 501) {
		ledsOff();
		blinkGreenLed(1000);
		mappedValue = map(mappedValue, 0, 1023, 0, 180);     // scale it to use it with the servo (value between 0 and 180)
		myservo.write(mappedValue);                  // sets the servo position according to the scaled value
 24e:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_ZN5Servo5writeEi>
	}
	else {
		solidRedLed();
	}
}
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	af 90       	pop	r10
		blinkGreenLed(1000);
		mappedValue = map(mappedValue, 0, 1023, 0, 180);     // scale it to use it with the servo (value between 0 and 180)
		myservo.write(mappedValue);                  // sets the servo position according to the scaled value
	}
	else {
		solidRedLed();
 262:	0c 94 ac 00 	jmp	0x158	; 0x158 <_Z11solidRedLedv>

00000266 <_GLOBAL__sub_I_myservo>:
#include <Arduino.h>
#include <Servo.h>
#include "Led.h"
#define BUTTONPIN 2

Servo myservo;  // create servo object to control a servo
 266:	8c e0       	ldi	r24, 0x0C	; 12
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0c 94 4f 04 	jmp	0x89e	; 0x89e <_ZN5ServoC1Ev>

0000026e <initVariant>:
 26e:	08 95       	ret

00000270 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 270:	0e 94 61 02 	call	0x4c2	; 0x4c2 <init>

	initVariant();
 274:	0e 94 37 01 	call	0x26e	; 0x26e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 278:	0e 94 bf 00 	call	0x17e	; 0x17e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 27c:	c0 e0       	ldi	r28, 0x00	; 0
 27e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 280:	0e 94 cc 00 	call	0x198	; 0x198 <loop>
		if (serialEventRun) serialEventRun();
 284:	20 97       	sbiw	r28, 0x00	; 0
 286:	e1 f3       	breq	.-8      	; 0x280 <main+0x10>
 288:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 28c:	f9 cf       	rjmp	.-14     	; 0x280 <main+0x10>

0000028e <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
 28e:	08 95       	ret

00000290 <attachInterrupt>:
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	e8 f4       	brcc	.+58     	; 0x2ce <attachInterrupt+0x3e>
 294:	e8 2f       	mov	r30, r24
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	ee 5f       	subi	r30, 0xFE	; 254
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	71 83       	std	Z+1, r23	; 0x01
 2a2:	60 83       	st	Z, r22
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	41 f0       	breq	.+16     	; 0x2b8 <attachInterrupt+0x28>
 2a8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2ac:	8c 7f       	andi	r24, 0xFC	; 252
 2ae:	48 2b       	or	r20, r24
 2b0:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2b4:	e8 9a       	sbi	0x1d, 0	; 29
 2b6:	08 95       	ret
 2b8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2bc:	83 7f       	andi	r24, 0xF3	; 243
 2be:	44 0f       	add	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	48 2b       	or	r20, r24
 2c8:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2cc:	e9 9a       	sbi	0x1d, 1	; 29
 2ce:	08 95       	ret

000002d0 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
 2f2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <intFunc>
 2f6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <intFunc+0x1>
 2fa:	09 95       	icall
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
 340:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <intFunc+0x2>
 344:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <intFunc+0x3>
 348:	09 95       	icall
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	8f 93       	push	r24
 37c:	9f 93       	push	r25
 37e:	af 93       	push	r26
 380:	bf 93       	push	r27
 382:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timer0_millis>
 386:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <timer0_millis+0x1>
 38a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <timer0_millis+0x2>
 38e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <timer0_millis+0x3>
 392:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <timer0_fract>
 396:	23 e0       	ldi	r18, 0x03	; 3
 398:	23 0f       	add	r18, r19
 39a:	2d 37       	cpi	r18, 0x7D	; 125
 39c:	20 f4       	brcc	.+8      	; 0x3a6 <__vector_16+0x3a>
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	a1 1d       	adc	r26, r1
 3a2:	b1 1d       	adc	r27, r1
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <__vector_16+0x44>
 3a6:	26 e8       	ldi	r18, 0x86	; 134
 3a8:	23 0f       	add	r18, r19
 3aa:	02 96       	adiw	r24, 0x02	; 2
 3ac:	a1 1d       	adc	r26, r1
 3ae:	b1 1d       	adc	r27, r1
 3b0:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <timer0_fract>
 3b4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timer0_millis>
 3b8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timer0_millis+0x1>
 3bc:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timer0_millis+0x2>
 3c0:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timer0_millis+0x3>
 3c4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer0_overflow_count>
 3c8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <timer0_overflow_count+0x1>
 3cc:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <timer0_overflow_count+0x2>
 3d0:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <timer0_overflow_count+0x3>
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	a1 1d       	adc	r26, r1
 3d8:	b1 1d       	adc	r27, r1
 3da:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer0_overflow_count>
 3de:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timer0_overflow_count+0x1>
 3e2:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timer0_overflow_count+0x2>
 3e6:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timer0_overflow_count+0x3>
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <micros>:
 400:	3f b7       	in	r19, 0x3f	; 63
 402:	f8 94       	cli
 404:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer0_overflow_count>
 408:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <timer0_overflow_count+0x1>
 40c:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <timer0_overflow_count+0x2>
 410:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <timer0_overflow_count+0x3>
 414:	26 b5       	in	r18, 0x26	; 38
 416:	a8 9b       	sbis	0x15, 0	; 21
 418:	05 c0       	rjmp	.+10     	; 0x424 <micros+0x24>
 41a:	2f 3f       	cpi	r18, 0xFF	; 255
 41c:	19 f0       	breq	.+6      	; 0x424 <micros+0x24>
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	a1 1d       	adc	r26, r1
 422:	b1 1d       	adc	r27, r1
 424:	3f bf       	out	0x3f, r19	; 63
 426:	ba 2f       	mov	r27, r26
 428:	a9 2f       	mov	r26, r25
 42a:	98 2f       	mov	r25, r24
 42c:	88 27       	eor	r24, r24
 42e:	82 0f       	add	r24, r18
 430:	91 1d       	adc	r25, r1
 432:	a1 1d       	adc	r26, r1
 434:	b1 1d       	adc	r27, r1
 436:	bc 01       	movw	r22, r24
 438:	cd 01       	movw	r24, r26
 43a:	42 e0       	ldi	r20, 0x02	; 2
 43c:	66 0f       	add	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	88 1f       	adc	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	4a 95       	dec	r20
 446:	d1 f7       	brne	.-12     	; 0x43c <micros+0x3c>
 448:	08 95       	ret

0000044a <delay>:
 44a:	8f 92       	push	r8
 44c:	9f 92       	push	r9
 44e:	af 92       	push	r10
 450:	bf 92       	push	r11
 452:	cf 92       	push	r12
 454:	df 92       	push	r13
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	6b 01       	movw	r12, r22
 45c:	7c 01       	movw	r14, r24
 45e:	0e 94 00 02 	call	0x400	; 0x400 <micros>
 462:	4b 01       	movw	r8, r22
 464:	5c 01       	movw	r10, r24
 466:	c1 14       	cp	r12, r1
 468:	d1 04       	cpc	r13, r1
 46a:	e1 04       	cpc	r14, r1
 46c:	f1 04       	cpc	r15, r1
 46e:	01 f1       	breq	.+64     	; 0x4b0 <delay+0x66>
 470:	0e 94 83 05 	call	0xb06	; 0xb06 <yield>
 474:	0e 94 00 02 	call	0x400	; 0x400 <micros>
 478:	dc 01       	movw	r26, r24
 47a:	cb 01       	movw	r24, r22
 47c:	88 19       	sub	r24, r8
 47e:	99 09       	sbc	r25, r9
 480:	aa 09       	sbc	r26, r10
 482:	bb 09       	sbc	r27, r11
 484:	88 3e       	cpi	r24, 0xE8	; 232
 486:	93 40       	sbci	r25, 0x03	; 3
 488:	a1 05       	cpc	r26, r1
 48a:	b1 05       	cpc	r27, r1
 48c:	60 f3       	brcs	.-40     	; 0x466 <delay+0x1c>
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	c2 1a       	sub	r12, r18
 492:	d1 08       	sbc	r13, r1
 494:	e1 08       	sbc	r14, r1
 496:	f1 08       	sbc	r15, r1
 498:	88 ee       	ldi	r24, 0xE8	; 232
 49a:	88 0e       	add	r8, r24
 49c:	83 e0       	ldi	r24, 0x03	; 3
 49e:	98 1e       	adc	r9, r24
 4a0:	a1 1c       	adc	r10, r1
 4a2:	b1 1c       	adc	r11, r1
 4a4:	c1 14       	cp	r12, r1
 4a6:	d1 04       	cpc	r13, r1
 4a8:	e1 04       	cpc	r14, r1
 4aa:	f1 04       	cpc	r15, r1
 4ac:	19 f7       	brne	.-58     	; 0x474 <delay+0x2a>
 4ae:	db cf       	rjmp	.-74     	; 0x466 <delay+0x1c>
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	9f 90       	pop	r9
 4be:	8f 90       	pop	r8
 4c0:	08 95       	ret

000004c2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 4c2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 4c4:	84 b5       	in	r24, 0x24	; 36
 4c6:	82 60       	ori	r24, 0x02	; 2
 4c8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 4ca:	84 b5       	in	r24, 0x24	; 36
 4cc:	81 60       	ori	r24, 0x01	; 1
 4ce:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 4d0:	85 b5       	in	r24, 0x25	; 37
 4d2:	82 60       	ori	r24, 0x02	; 2
 4d4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 4d6:	85 b5       	in	r24, 0x25	; 37
 4d8:	81 60       	ori	r24, 0x01	; 1
 4da:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 4dc:	ee e6       	ldi	r30, 0x6E	; 110
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	81 60       	ori	r24, 0x01	; 1
 4e4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 4e6:	e1 e8       	ldi	r30, 0x81	; 129
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 4ec:	80 81       	ld	r24, Z
 4ee:	82 60       	ori	r24, 0x02	; 2
 4f0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 4f2:	80 81       	ld	r24, Z
 4f4:	81 60       	ori	r24, 0x01	; 1
 4f6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 4f8:	e0 e8       	ldi	r30, 0x80	; 128
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	81 60       	ori	r24, 0x01	; 1
 500:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 502:	e1 eb       	ldi	r30, 0xB1	; 177
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	84 60       	ori	r24, 0x04	; 4
 50a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 50c:	e0 eb       	ldi	r30, 0xB0	; 176
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	81 60       	ori	r24, 0x01	; 1
 514:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 516:	ea e7       	ldi	r30, 0x7A	; 122
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	84 60       	ori	r24, 0x04	; 4
 51e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 520:	80 81       	ld	r24, Z
 522:	82 60       	ori	r24, 0x02	; 2
 524:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 526:	80 81       	ld	r24, Z
 528:	81 60       	ori	r24, 0x01	; 1
 52a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 52c:	80 81       	ld	r24, Z
 52e:	80 68       	ori	r24, 0x80	; 128
 530:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 532:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 536:	08 95       	ret

00000538 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 538:	8e 30       	cpi	r24, 0x0E	; 14
 53a:	08 f0       	brcs	.+2      	; 0x53e <analogRead+0x6>
 53c:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 53e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
 542:	90 e4       	ldi	r25, 0x40	; 64
 544:	29 9f       	mul	r18, r25
 546:	90 01       	movw	r18, r0
 548:	11 24       	eor	r1, r1
 54a:	87 70       	andi	r24, 0x07	; 7
 54c:	82 2b       	or	r24, r18
 54e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 552:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 556:	80 64       	ori	r24, 0x40	; 64
 558:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 55c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 560:	86 fd       	sbrc	r24, 6
 562:	fc cf       	rjmp	.-8      	; 0x55c <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 564:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 568:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 56c:	90 e0       	ldi	r25, 0x00	; 0
}
 56e:	92 2b       	or	r25, r18
 570:	08 95       	ret

00000572 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 572:	83 30       	cpi	r24, 0x03	; 3
 574:	81 f0       	breq	.+32     	; 0x596 <turnOffPWM+0x24>
 576:	28 f4       	brcc	.+10     	; 0x582 <turnOffPWM+0x10>
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	99 f0       	breq	.+38     	; 0x5a2 <turnOffPWM+0x30>
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	a1 f0       	breq	.+40     	; 0x5a8 <turnOffPWM+0x36>
 580:	08 95       	ret
 582:	87 30       	cpi	r24, 0x07	; 7
 584:	a9 f0       	breq	.+42     	; 0x5b0 <turnOffPWM+0x3e>
 586:	88 30       	cpi	r24, 0x08	; 8
 588:	b9 f0       	breq	.+46     	; 0x5b8 <turnOffPWM+0x46>
 58a:	84 30       	cpi	r24, 0x04	; 4
 58c:	d1 f4       	brne	.+52     	; 0x5c2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 58e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 592:	8f 7d       	andi	r24, 0xDF	; 223
 594:	03 c0       	rjmp	.+6      	; 0x59c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 596:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 59a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 59c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 5a0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 5a2:	84 b5       	in	r24, 0x24	; 36
 5a4:	8f 77       	andi	r24, 0x7F	; 127
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 5a8:	84 b5       	in	r24, 0x24	; 36
 5aa:	8f 7d       	andi	r24, 0xDF	; 223
 5ac:	84 bd       	out	0x24, r24	; 36
 5ae:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 5b0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5b4:	8f 77       	andi	r24, 0x7F	; 127
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 5b8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5bc:	8f 7d       	andi	r24, 0xDF	; 223
 5be:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5c2:	08 95       	ret

000005c4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	fc 01       	movw	r30, r24
 5cc:	e4 58       	subi	r30, 0x84	; 132
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 5d2:	fc 01       	movw	r30, r24
 5d4:	e0 57       	subi	r30, 0x70	; 112
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 5da:	88 23       	and	r24, r24
 5dc:	61 f1       	breq	.+88     	; 0x636 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	fc 01       	movw	r30, r24
 5e6:	e2 55       	subi	r30, 0x52	; 82
 5e8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ea:	c5 91       	lpm	r28, Z+
 5ec:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 5ee:	fc 01       	movw	r30, r24
 5f0:	ec 55       	subi	r30, 0x5C	; 92
 5f2:	ff 4f       	sbci	r31, 0xFF	; 255
 5f4:	a5 91       	lpm	r26, Z+
 5f6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 5f8:	61 11       	cpse	r22, r1
 5fa:	09 c0       	rjmp	.+18     	; 0x60e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 5fc:	9f b7       	in	r25, 0x3f	; 63
                cli();
 5fe:	f8 94       	cli
		*reg &= ~bit;
 600:	88 81       	ld	r24, Y
 602:	20 95       	com	r18
 604:	82 23       	and	r24, r18
 606:	88 83       	st	Y, r24
		*out &= ~bit;
 608:	ec 91       	ld	r30, X
 60a:	2e 23       	and	r18, r30
 60c:	0b c0       	rjmp	.+22     	; 0x624 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 60e:	62 30       	cpi	r22, 0x02	; 2
 610:	61 f4       	brne	.+24     	; 0x62a <pinMode+0x66>
		uint8_t oldSREG = SREG;
 612:	9f b7       	in	r25, 0x3f	; 63
                cli();
 614:	f8 94       	cli
		*reg &= ~bit;
 616:	88 81       	ld	r24, Y
 618:	32 2f       	mov	r19, r18
 61a:	30 95       	com	r19
 61c:	83 23       	and	r24, r19
 61e:	88 83       	st	Y, r24
		*out |= bit;
 620:	ec 91       	ld	r30, X
 622:	2e 2b       	or	r18, r30
 624:	2c 93       	st	X, r18
		SREG = oldSREG;
 626:	9f bf       	out	0x3f, r25	; 63
 628:	06 c0       	rjmp	.+12     	; 0x636 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 62a:	8f b7       	in	r24, 0x3f	; 63
                cli();
 62c:	f8 94       	cli
		*reg |= bit;
 62e:	e8 81       	ld	r30, Y
 630:	2e 2b       	or	r18, r30
 632:	28 83       	st	Y, r18
		SREG = oldSREG;
 634:	8f bf       	out	0x3f, r24	; 63
	}
}
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 63c:	1f 93       	push	r17
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	f9 01       	movw	r30, r18
 648:	e8 59       	subi	r30, 0x98	; 152
 64a:	ff 4f       	sbci	r31, 0xFF	; 255
 64c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 64e:	f9 01       	movw	r30, r18
 650:	e4 58       	subi	r30, 0x84	; 132
 652:	ff 4f       	sbci	r31, 0xFF	; 255
 654:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 656:	f9 01       	movw	r30, r18
 658:	e0 57       	subi	r30, 0x70	; 112
 65a:	ff 4f       	sbci	r31, 0xFF	; 255
 65c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 65e:	cc 23       	and	r28, r28
 660:	c1 f0       	breq	.+48     	; 0x692 <digitalWrite+0x56>
 662:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 664:	81 11       	cpse	r24, r1
 666:	0e 94 b9 02 	call	0x572	; 0x572 <turnOffPWM>

	out = portOutputRegister(port);
 66a:	ec 2f       	mov	r30, r28
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	ee 0f       	add	r30, r30
 670:	ff 1f       	adc	r31, r31
 672:	ec 55       	subi	r30, 0x5C	; 92
 674:	ff 4f       	sbci	r31, 0xFF	; 255
 676:	a5 91       	lpm	r26, Z+
 678:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 67a:	9f b7       	in	r25, 0x3f	; 63
	cli();
 67c:	f8 94       	cli

	if (val == LOW) {
 67e:	11 11       	cpse	r17, r1
 680:	04 c0       	rjmp	.+8      	; 0x68a <digitalWrite+0x4e>
		*out &= ~bit;
 682:	8c 91       	ld	r24, X
 684:	d0 95       	com	r29
 686:	d8 23       	and	r29, r24
 688:	02 c0       	rjmp	.+4      	; 0x68e <digitalWrite+0x52>
	} else {
		*out |= bit;
 68a:	ec 91       	ld	r30, X
 68c:	de 2b       	or	r29, r30
 68e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 690:	9f bf       	out	0x3f, r25	; 63
}
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	08 95       	ret

0000069a <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 69a:	4f 92       	push	r4
 69c:	5f 92       	push	r5
 69e:	6f 92       	push	r6
 6a0:	7f 92       	push	r7
 6a2:	af 92       	push	r10
 6a4:	bf 92       	push	r11
 6a6:	cf 92       	push	r12
 6a8:	df 92       	push	r13
 6aa:	ef 92       	push	r14
 6ac:	ff 92       	push	r15
 6ae:	0f 93       	push	r16
 6b0:	1f 93       	push	r17
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
 6ba:	29 01       	movw	r4, r18
 6bc:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 6be:	9b 01       	movw	r18, r22
 6c0:	ac 01       	movw	r20, r24
 6c2:	24 19       	sub	r18, r4
 6c4:	35 09       	sbc	r19, r5
 6c6:	46 09       	sbc	r20, r6
 6c8:	57 09       	sbc	r21, r7
 6ca:	89 89       	ldd	r24, Y+17	; 0x11
 6cc:	9a 89       	ldd	r25, Y+18	; 0x12
 6ce:	ab 89       	ldd	r26, Y+19	; 0x13
 6d0:	bc 89       	ldd	r27, Y+20	; 0x14
 6d2:	bc 01       	movw	r22, r24
 6d4:	cd 01       	movw	r24, r26
 6d6:	6a 19       	sub	r22, r10
 6d8:	7b 09       	sbc	r23, r11
 6da:	8c 09       	sbc	r24, r12
 6dc:	9d 09       	sbc	r25, r13
 6de:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsi3>
 6e2:	a8 01       	movw	r20, r16
 6e4:	97 01       	movw	r18, r14
 6e6:	24 19       	sub	r18, r4
 6e8:	35 09       	sbc	r19, r5
 6ea:	46 09       	sbc	r20, r6
 6ec:	57 09       	sbc	r21, r7
 6ee:	0e 94 a0 05 	call	0xb40	; 0xb40 <__divmodsi4>
 6f2:	ca 01       	movw	r24, r20
 6f4:	b9 01       	movw	r22, r18
 6f6:	6a 0d       	add	r22, r10
 6f8:	7b 1d       	adc	r23, r11
 6fa:	8c 1d       	adc	r24, r12
 6fc:	9d 1d       	adc	r25, r13
}
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	df 90       	pop	r13
 70c:	cf 90       	pop	r12
 70e:	bf 90       	pop	r11
 710:	af 90       	pop	r10
 712:	7f 90       	pop	r7
 714:	6f 90       	pop	r6
 716:	5f 90       	pop	r5
 718:	4f 90       	pop	r4
 71a:	08 95       	ret

0000071c <__vector_11>:
  return this->servoIndex ;
}

void Servo::detach()
{
  servos[this->servoIndex].Pin.isActive = false;
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	0f 92       	push	r0
 724:	11 24       	eor	r1, r1
 726:	2f 93       	push	r18
 728:	3f 93       	push	r19
 72a:	4f 93       	push	r20
 72c:	5f 93       	push	r21
 72e:	6f 93       	push	r22
 730:	7f 93       	push	r23
 732:	8f 93       	push	r24
 734:	9f 93       	push	r25
 736:	af 93       	push	r26
 738:	bf 93       	push	r27
 73a:	ef 93       	push	r30
 73c:	ff 93       	push	r31
 73e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL7Channel>
 742:	87 ff       	sbrs	r24, 7
 744:	05 c0       	rjmp	.+10     	; 0x750 <__vector_11+0x34>
 746:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 74a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 74e:	1b c0       	rjmp	.+54     	; 0x786 <__vector_11+0x6a>
 750:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <_ZL7Channel>
 754:	02 2e       	mov	r0, r18
 756:	00 0c       	add	r0, r0
 758:	33 0b       	sbc	r19, r19
 75a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ServoCount>
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	28 17       	cp	r18, r24
 762:	39 07       	cpc	r19, r25
 764:	84 f4       	brge	.+32     	; 0x786 <__vector_11+0x6a>
 766:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL7Channel>
 76a:	08 2e       	mov	r0, r24
 76c:	00 0c       	add	r0, r0
 76e:	99 0b       	sbc	r25, r25
 770:	fc 01       	movw	r30, r24
 772:	ee 0f       	add	r30, r30
 774:	ff 1f       	adc	r31, r31
 776:	8e 0f       	add	r24, r30
 778:	9f 1f       	adc	r25, r31
 77a:	fc 01       	movw	r30, r24
 77c:	e6 5e       	subi	r30, 0xE6	; 230
 77e:	fe 4f       	sbci	r31, 0xFE	; 254
 780:	80 81       	ld	r24, Z
 782:	86 fd       	sbrc	r24, 6
 784:	15 c0       	rjmp	.+42     	; 0x7b0 <__vector_11+0x94>
 786:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL7Channel>
 78a:	8f 5f       	subi	r24, 0xFF	; 255
 78c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZL7Channel>
 790:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <_ZL7Channel>
 794:	02 2e       	mov	r0, r18
 796:	00 0c       	add	r0, r0
 798:	33 0b       	sbc	r19, r19
 79a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ServoCount>
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	28 17       	cp	r18, r24
 7a2:	39 07       	cpc	r19, r25
 7a4:	c4 f4       	brge	.+48     	; 0x7d6 <__vector_11+0xba>
 7a6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL7Channel>
 7aa:	8c 30       	cpi	r24, 0x0C	; 12
 7ac:	64 f1       	brlt	.+88     	; 0x806 <__vector_11+0xea>
 7ae:	13 c0       	rjmp	.+38     	; 0x7d6 <__vector_11+0xba>
 7b0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL7Channel>
 7b4:	08 2e       	mov	r0, r24
 7b6:	00 0c       	add	r0, r0
 7b8:	99 0b       	sbc	r25, r25
 7ba:	fc 01       	movw	r30, r24
 7bc:	ee 0f       	add	r30, r30
 7be:	ff 1f       	adc	r31, r31
 7c0:	8e 0f       	add	r24, r30
 7c2:	9f 1f       	adc	r25, r31
 7c4:	fc 01       	movw	r30, r24
 7c6:	e6 5e       	subi	r30, 0xE6	; 230
 7c8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ca:	80 81       	ld	r24, Z
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	8f 73       	andi	r24, 0x3F	; 63
 7d0:	0e 94 1e 03 	call	0x63c	; 0x63c <digitalWrite>
 7d4:	d8 cf       	rjmp	.-80     	; 0x786 <__vector_11+0x6a>
 7d6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 7da:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 7de:	04 96       	adiw	r24, 0x04	; 4
 7e0:	80 34       	cpi	r24, 0x40	; 64
 7e2:	9c 49       	sbci	r25, 0x9C	; 156
 7e4:	18 f4       	brcc	.+6      	; 0x7ec <__vector_11+0xd0>
 7e6:	80 e4       	ldi	r24, 0x40	; 64
 7e8:	9c e9       	ldi	r25, 0x9C	; 156
 7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <__vector_11+0xda>
 7ec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 7f0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 7f4:	04 96       	adiw	r24, 0x04	; 4
 7f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 7fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 7fe:	8f ef       	ldi	r24, 0xFF	; 255
 800:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZL7Channel>
 804:	3b c0       	rjmp	.+118    	; 0x87c <__vector_11+0x160>
 806:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 80a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 80e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL7Channel>
 812:	08 2e       	mov	r0, r24
 814:	00 0c       	add	r0, r0
 816:	99 0b       	sbc	r25, r25
 818:	fc 01       	movw	r30, r24
 81a:	ee 0f       	add	r30, r30
 81c:	ff 1f       	adc	r31, r31
 81e:	8e 0f       	add	r24, r30
 820:	9f 1f       	adc	r25, r31
 822:	fc 01       	movw	r30, r24
 824:	e6 5e       	subi	r30, 0xE6	; 230
 826:	fe 4f       	sbci	r31, 0xFE	; 254
 828:	81 81       	ldd	r24, Z+1	; 0x01
 82a:	92 81       	ldd	r25, Z+2	; 0x02
 82c:	82 0f       	add	r24, r18
 82e:	93 1f       	adc	r25, r19
 830:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 834:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 838:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL7Channel>
 83c:	08 2e       	mov	r0, r24
 83e:	00 0c       	add	r0, r0
 840:	99 0b       	sbc	r25, r25
 842:	fc 01       	movw	r30, r24
 844:	ee 0f       	add	r30, r30
 846:	ff 1f       	adc	r31, r31
 848:	8e 0f       	add	r24, r30
 84a:	9f 1f       	adc	r25, r31
 84c:	fc 01       	movw	r30, r24
 84e:	e6 5e       	subi	r30, 0xE6	; 230
 850:	fe 4f       	sbci	r31, 0xFE	; 254
 852:	80 81       	ld	r24, Z
 854:	86 ff       	sbrs	r24, 6
 856:	12 c0       	rjmp	.+36     	; 0x87c <__vector_11+0x160>
 858:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL7Channel>
 85c:	08 2e       	mov	r0, r24
 85e:	00 0c       	add	r0, r0
 860:	99 0b       	sbc	r25, r25
 862:	fc 01       	movw	r30, r24
 864:	ee 0f       	add	r30, r30
 866:	ff 1f       	adc	r31, r31
 868:	8e 0f       	add	r24, r30
 86a:	9f 1f       	adc	r25, r31
 86c:	fc 01       	movw	r30, r24
 86e:	e6 5e       	subi	r30, 0xE6	; 230
 870:	fe 4f       	sbci	r31, 0xFE	; 254
 872:	80 81       	ld	r24, Z
 874:	61 e0       	ldi	r22, 0x01	; 1
 876:	8f 73       	andi	r24, 0x3F	; 63
 878:	0e 94 1e 03 	call	0x63c	; 0x63c <digitalWrite>
 87c:	ff 91       	pop	r31
 87e:	ef 91       	pop	r30
 880:	bf 91       	pop	r27
 882:	af 91       	pop	r26
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	7f 91       	pop	r23
 88a:	6f 91       	pop	r22
 88c:	5f 91       	pop	r21
 88e:	4f 91       	pop	r20
 890:	3f 91       	pop	r19
 892:	2f 91       	pop	r18
 894:	0f 90       	pop	r0
 896:	0f be       	out	0x3f, r0	; 63
 898:	0f 90       	pop	r0
 89a:	1f 90       	pop	r1
 89c:	18 95       	reti

0000089e <_ZN5ServoC1Ev>:
 89e:	fc 01       	movw	r30, r24
 8a0:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ServoCount>
 8a4:	9c 30       	cpi	r25, 0x0C	; 12
 8a6:	a0 f4       	brcc	.+40     	; 0x8d0 <_ZN5ServoC1Ev+0x32>
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	89 0f       	add	r24, r25
 8ac:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <ServoCount>
 8b0:	90 83       	st	Z, r25
 8b2:	89 2f       	mov	r24, r25
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	fc 01       	movw	r30, r24
 8b8:	ee 0f       	add	r30, r30
 8ba:	ff 1f       	adc	r31, r31
 8bc:	8e 0f       	add	r24, r30
 8be:	9f 1f       	adc	r25, r31
 8c0:	fc 01       	movw	r30, r24
 8c2:	e6 5e       	subi	r30, 0xE6	; 230
 8c4:	fe 4f       	sbci	r31, 0xFE	; 254
 8c6:	88 eb       	ldi	r24, 0xB8	; 184
 8c8:	9b e0       	ldi	r25, 0x0B	; 11
 8ca:	92 83       	std	Z+2, r25	; 0x02
 8cc:	81 83       	std	Z+1, r24	; 0x01
 8ce:	08 95       	ret
 8d0:	8f ef       	ldi	r24, 0xFF	; 255
 8d2:	80 83       	st	Z, r24
 8d4:	08 95       	ret

000008d6 <_ZN5Servo6attachEiii>:
 8d6:	df 92       	push	r13
 8d8:	ef 92       	push	r14
 8da:	ff 92       	push	r15
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	ec 01       	movw	r28, r24
 8e6:	d6 2e       	mov	r13, r22
 8e8:	7a 01       	movw	r14, r20
 8ea:	89 01       	movw	r16, r18
 8ec:	88 81       	ld	r24, Y
 8ee:	8c 30       	cpi	r24, 0x0C	; 12
 8f0:	08 f0       	brcs	.+2      	; 0x8f4 <_ZN5Servo6attachEiii+0x1e>
 8f2:	68 c0       	rjmp	.+208    	; 0x9c4 <__stack+0xc5>
 8f4:	61 e0       	ldi	r22, 0x01	; 1
 8f6:	8d 2d       	mov	r24, r13
 8f8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <pinMode>
 8fc:	88 81       	ld	r24, Y
 8fe:	e8 2f       	mov	r30, r24
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	9f 01       	movw	r18, r30
 904:	22 0f       	add	r18, r18
 906:	33 1f       	adc	r19, r19
 908:	e2 0f       	add	r30, r18
 90a:	f3 1f       	adc	r31, r19
 90c:	e6 5e       	subi	r30, 0xE6	; 230
 90e:	fe 4f       	sbci	r31, 0xFE	; 254
 910:	9d 2d       	mov	r25, r13
 912:	9f 73       	andi	r25, 0x3F	; 63
 914:	20 81       	ld	r18, Z
 916:	20 7c       	andi	r18, 0xC0	; 192
 918:	d2 2e       	mov	r13, r18
 91a:	d9 2a       	or	r13, r25
 91c:	d0 82       	st	Z, r13
 91e:	20 e2       	ldi	r18, 0x20	; 32
 920:	32 e0       	ldi	r19, 0x02	; 2
 922:	2e 19       	sub	r18, r14
 924:	3f 09       	sbc	r19, r15
 926:	37 ff       	sbrs	r19, 7
 928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0x2f>
 92a:	2d 5f       	subi	r18, 0xFD	; 253
 92c:	3f 4f       	sbci	r19, 0xFF	; 255
 92e:	35 95       	asr	r19
 930:	27 95       	ror	r18
 932:	35 95       	asr	r19
 934:	27 95       	ror	r18
 936:	29 83       	std	Y+1, r18	; 0x01
 938:	20 e6       	ldi	r18, 0x60	; 96
 93a:	39 e0       	ldi	r19, 0x09	; 9
 93c:	20 1b       	sub	r18, r16
 93e:	31 0b       	sbc	r19, r17
 940:	37 ff       	sbrs	r19, 7
 942:	02 c0       	rjmp	.+4      	; 0x948 <__stack+0x49>
 944:	2d 5f       	subi	r18, 0xFD	; 253
 946:	3f 4f       	sbci	r19, 0xFF	; 255
 948:	35 95       	asr	r19
 94a:	27 95       	ror	r18
 94c:	35 95       	asr	r19
 94e:	27 95       	ror	r18
 950:	2a 83       	std	Y+2, r18	; 0x02
 952:	2c e0       	ldi	r18, 0x0C	; 12
 954:	62 2f       	mov	r22, r18
 956:	0e 94 94 05 	call	0xb28	; 0xb28 <__udivmodqi4>
 95a:	28 9f       	mul	r18, r24
 95c:	b0 01       	movw	r22, r0
 95e:	11 24       	eor	r1, r1
 960:	40 e0       	ldi	r20, 0x00	; 0
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	9b 01       	movw	r18, r22
 966:	24 0f       	add	r18, r20
 968:	35 1f       	adc	r19, r21
 96a:	f9 01       	movw	r30, r18
 96c:	ee 0f       	add	r30, r30
 96e:	ff 1f       	adc	r31, r31
 970:	2e 0f       	add	r18, r30
 972:	3f 1f       	adc	r19, r31
 974:	f9 01       	movw	r30, r18
 976:	e6 5e       	subi	r30, 0xE6	; 230
 978:	fe 4f       	sbci	r31, 0xFE	; 254
 97a:	90 81       	ld	r25, Z
 97c:	96 fd       	sbrc	r25, 6
 97e:	16 c0       	rjmp	.+44     	; 0x9ac <__stack+0xad>
 980:	4f 5f       	subi	r20, 0xFF	; 255
 982:	5f 4f       	sbci	r21, 0xFF	; 255
 984:	4c 30       	cpi	r20, 0x0C	; 12
 986:	51 05       	cpc	r21, r1
 988:	69 f7       	brne	.-38     	; 0x964 <__stack+0x65>
 98a:	81 11       	cpse	r24, r1
 98c:	0f c0       	rjmp	.+30     	; 0x9ac <__stack+0xad>
 98e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 992:	82 e0       	ldi	r24, 0x02	; 2
 994:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 998:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 99c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 9a0:	b1 9a       	sbi	0x16, 1	; 22
 9a2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 9a6:	82 60       	ori	r24, 0x02	; 2
 9a8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 9ac:	e8 81       	ld	r30, Y
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	cf 01       	movw	r24, r30
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	e8 0f       	add	r30, r24
 9b8:	f9 1f       	adc	r31, r25
 9ba:	e6 5e       	subi	r30, 0xE6	; 230
 9bc:	fe 4f       	sbci	r31, 0xFE	; 254
 9be:	80 81       	ld	r24, Z
 9c0:	80 64       	ori	r24, 0x40	; 64
 9c2:	80 83       	st	Z, r24
 9c4:	88 81       	ld	r24, Y
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	1f 91       	pop	r17
 9cc:	0f 91       	pop	r16
 9ce:	ff 90       	pop	r15
 9d0:	ef 90       	pop	r14
 9d2:	df 90       	pop	r13
 9d4:	08 95       	ret

000009d6 <_ZN5Servo6attachEi>:
 9d6:	20 e6       	ldi	r18, 0x60	; 96
 9d8:	39 e0       	ldi	r19, 0x09	; 9
 9da:	40 e2       	ldi	r20, 0x20	; 32
 9dc:	52 e0       	ldi	r21, 0x02	; 2
 9de:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <_ZN5Servo6attachEiii>

000009e2 <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
 9e2:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
 9e4:	90 81       	ld	r25, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
 9e6:	9c 30       	cpi	r25, 0x0C	; 12
 9e8:	88 f5       	brcc	.+98     	; 0xa4c <_ZN5Servo17writeMicrosecondsEi+0x6a>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
 9ea:	81 81       	ldd	r24, Z+1	; 0x01
 9ec:	28 e8       	ldi	r18, 0x88	; 136
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	28 1b       	sub	r18, r24
 9f2:	31 09       	sbc	r19, r1
 9f4:	87 fd       	sbrc	r24, 7
 9f6:	33 95       	inc	r19
 9f8:	22 0f       	add	r18, r18
 9fa:	33 1f       	adc	r19, r19
 9fc:	22 0f       	add	r18, r18
 9fe:	33 1f       	adc	r19, r19
 a00:	62 17       	cp	r22, r18
 a02:	73 07       	cpc	r23, r19
 a04:	84 f0       	brlt	.+32     	; 0xa26 <_ZN5Servo17writeMicrosecondsEi+0x44>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
 a06:	82 81       	ldd	r24, Z+2	; 0x02
 a08:	48 e5       	ldi	r20, 0x58	; 88
 a0a:	52 e0       	ldi	r21, 0x02	; 2
 a0c:	48 1b       	sub	r20, r24
 a0e:	51 09       	sbc	r21, r1
 a10:	87 fd       	sbrc	r24, 7
 a12:	53 95       	inc	r21
 a14:	44 0f       	add	r20, r20
 a16:	55 1f       	adc	r21, r21
 a18:	44 0f       	add	r20, r20
 a1a:	55 1f       	adc	r21, r21
 a1c:	9b 01       	movw	r18, r22
 a1e:	46 17       	cp	r20, r22
 a20:	57 07       	cpc	r21, r23
 a22:	0c f4       	brge	.+2      	; 0xa26 <_ZN5Servo17writeMicrosecondsEi+0x44>
 a24:	9a 01       	movw	r18, r20
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
 a26:	22 50       	subi	r18, 0x02	; 2
 a28:	31 09       	sbc	r19, r1
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19

    uint8_t oldSREG = SREG;
 a2e:	4f b7       	in	r20, 0x3f	; 63
    cli();
 a30:	f8 94       	cli
    servos[channel].ticks = value;
 a32:	89 2f       	mov	r24, r25
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	fc 01       	movw	r30, r24
 a38:	ee 0f       	add	r30, r30
 a3a:	ff 1f       	adc	r31, r31
 a3c:	8e 0f       	add	r24, r30
 a3e:	9f 1f       	adc	r25, r31
 a40:	fc 01       	movw	r30, r24
 a42:	e6 5e       	subi	r30, 0xE6	; 230
 a44:	fe 4f       	sbci	r31, 0xFE	; 254
 a46:	32 83       	std	Z+2, r19	; 0x02
 a48:	21 83       	std	Z+1, r18	; 0x01
    SREG = oldSREG;
 a4a:	4f bf       	out	0x3f, r20	; 63
 a4c:	08 95       	ret

00000a4e <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{
 a4e:	af 92       	push	r10
 a50:	bf 92       	push	r11
 a52:	cf 92       	push	r12
 a54:	df 92       	push	r13
 a56:	ef 92       	push	r14
 a58:	ff 92       	push	r15
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
 a64:	60 32       	cpi	r22, 0x20	; 32
 a66:	82 e0       	ldi	r24, 0x02	; 2
 a68:	78 07       	cpc	r23, r24
 a6a:	0c f0       	brlt	.+2      	; 0xa6e <_ZN5Servo5writeEi+0x20>
 a6c:	3f c0       	rjmp	.+126    	; 0xaec <_ZN5Servo5writeEi+0x9e>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
 a6e:	77 fd       	sbrc	r23, 7
 a70:	06 c0       	rjmp	.+12     	; 0xa7e <_ZN5Servo5writeEi+0x30>
    if(value > 180) value = 180;
 a72:	65 3b       	cpi	r22, 0xB5	; 181
 a74:	71 05       	cpc	r23, r1
 a76:	2c f0       	brlt	.+10     	; 0xa82 <_ZN5Servo5writeEi+0x34>
 a78:	64 eb       	ldi	r22, 0xB4	; 180
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <_ZN5Servo5writeEi+0x34>

void Servo::write(int value)
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	70 e0       	ldi	r23, 0x00	; 0
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
 a82:	89 81       	ldd	r24, Y+1	; 0x01
 a84:	28 e8       	ldi	r18, 0x88	; 136
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	59 01       	movw	r10, r18
 a8a:	a8 1a       	sub	r10, r24
 a8c:	b1 08       	sbc	r11, r1
 a8e:	87 fd       	sbrc	r24, 7
 a90:	b3 94       	inc	r11
 a92:	aa 0c       	add	r10, r10
 a94:	bb 1c       	adc	r11, r11
 a96:	aa 0c       	add	r10, r10
 a98:	bb 1c       	adc	r11, r11
 a9a:	0b 2c       	mov	r0, r11
 a9c:	00 0c       	add	r0, r0
 a9e:	cc 08       	sbc	r12, r12
 aa0:	dd 08       	sbc	r13, r13
 aa2:	07 2e       	mov	r0, r23
 aa4:	00 0c       	add	r0, r0
 aa6:	88 0b       	sbc	r24, r24
 aa8:	99 0b       	sbc	r25, r25
 aaa:	2a 81       	ldd	r18, Y+2	; 0x02
 aac:	08 e5       	ldi	r16, 0x58	; 88
 aae:	12 e0       	ldi	r17, 0x02	; 2
 ab0:	02 1b       	sub	r16, r18
 ab2:	11 09       	sbc	r17, r1
 ab4:	27 fd       	sbrc	r18, 7
 ab6:	13 95       	inc	r17
 ab8:	00 0f       	add	r16, r16
 aba:	11 1f       	adc	r17, r17
 abc:	00 0f       	add	r16, r16
 abe:	11 1f       	adc	r17, r17
 ac0:	01 2e       	mov	r0, r17
 ac2:	00 0c       	add	r0, r0
 ac4:	22 0b       	sbc	r18, r18
 ac6:	33 0b       	sbc	r19, r19
 ac8:	3f 93       	push	r19
 aca:	2f 93       	push	r18
 acc:	1f 93       	push	r17
 ace:	0f 93       	push	r16
 ad0:	14 eb       	ldi	r17, 0xB4	; 180
 ad2:	e1 2e       	mov	r14, r17
 ad4:	f1 2c       	mov	r15, r1
 ad6:	00 e0       	ldi	r16, 0x00	; 0
 ad8:	10 e0       	ldi	r17, 0x00	; 0
 ada:	20 e0       	ldi	r18, 0x00	; 0
 adc:	30 e0       	ldi	r19, 0x00	; 0
 ade:	a9 01       	movw	r20, r18
 ae0:	0e 94 4d 03 	call	0x69a	; 0x69a <_Z3maplllll>
 ae4:	0f 90       	pop	r0
 ae6:	0f 90       	pop	r0
 ae8:	0f 90       	pop	r0
 aea:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
 aec:	ce 01       	movw	r24, r28
}
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	1f 91       	pop	r17
 af4:	0f 91       	pop	r16
 af6:	ff 90       	pop	r15
 af8:	ef 90       	pop	r14
 afa:	df 90       	pop	r13
 afc:	cf 90       	pop	r12
 afe:	bf 90       	pop	r11
 b00:	af 90       	pop	r10
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
 b02:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <_ZN5Servo17writeMicrosecondsEi>

00000b06 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 b06:	08 95       	ret

00000b08 <__mulsi3>:
 b08:	db 01       	movw	r26, r22
 b0a:	8f 93       	push	r24
 b0c:	9f 93       	push	r25
 b0e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__muluhisi3>
 b12:	bf 91       	pop	r27
 b14:	af 91       	pop	r26
 b16:	a2 9f       	mul	r26, r18
 b18:	80 0d       	add	r24, r0
 b1a:	91 1d       	adc	r25, r1
 b1c:	a3 9f       	mul	r26, r19
 b1e:	90 0d       	add	r25, r0
 b20:	b2 9f       	mul	r27, r18
 b22:	90 0d       	add	r25, r0
 b24:	11 24       	eor	r1, r1
 b26:	08 95       	ret

00000b28 <__udivmodqi4>:
 b28:	99 1b       	sub	r25, r25
 b2a:	79 e0       	ldi	r23, 0x09	; 9
 b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__udivmodqi4_ep>

00000b2e <__udivmodqi4_loop>:
 b2e:	99 1f       	adc	r25, r25
 b30:	96 17       	cp	r25, r22
 b32:	08 f0       	brcs	.+2      	; 0xb36 <__udivmodqi4_ep>
 b34:	96 1b       	sub	r25, r22

00000b36 <__udivmodqi4_ep>:
 b36:	88 1f       	adc	r24, r24
 b38:	7a 95       	dec	r23
 b3a:	c9 f7       	brne	.-14     	; 0xb2e <__udivmodqi4_loop>
 b3c:	80 95       	com	r24
 b3e:	08 95       	ret

00000b40 <__divmodsi4>:
 b40:	05 2e       	mov	r0, r21
 b42:	97 fb       	bst	r25, 7
 b44:	1e f4       	brtc	.+6      	; 0xb4c <__divmodsi4+0xc>
 b46:	00 94       	com	r0
 b48:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__negsi2>
 b4c:	57 fd       	sbrc	r21, 7
 b4e:	07 d0       	rcall	.+14     	; 0xb5e <__divmodsi4_neg2>
 b50:	0e 94 ca 05 	call	0xb94	; 0xb94 <__udivmodsi4>
 b54:	07 fc       	sbrc	r0, 7
 b56:	03 d0       	rcall	.+6      	; 0xb5e <__divmodsi4_neg2>
 b58:	4e f4       	brtc	.+18     	; 0xb6c <__divmodsi4_exit>
 b5a:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__negsi2>

00000b5e <__divmodsi4_neg2>:
 b5e:	50 95       	com	r21
 b60:	40 95       	com	r20
 b62:	30 95       	com	r19
 b64:	21 95       	neg	r18
 b66:	3f 4f       	sbci	r19, 0xFF	; 255
 b68:	4f 4f       	sbci	r20, 0xFF	; 255
 b6a:	5f 4f       	sbci	r21, 0xFF	; 255

00000b6c <__divmodsi4_exit>:
 b6c:	08 95       	ret

00000b6e <__negsi2>:
 b6e:	90 95       	com	r25
 b70:	80 95       	com	r24
 b72:	70 95       	com	r23
 b74:	61 95       	neg	r22
 b76:	7f 4f       	sbci	r23, 0xFF	; 255
 b78:	8f 4f       	sbci	r24, 0xFF	; 255
 b7a:	9f 4f       	sbci	r25, 0xFF	; 255
 b7c:	08 95       	ret

00000b7e <__muluhisi3>:
 b7e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__umulhisi3>
 b82:	a5 9f       	mul	r26, r21
 b84:	90 0d       	add	r25, r0
 b86:	b4 9f       	mul	r27, r20
 b88:	90 0d       	add	r25, r0
 b8a:	a4 9f       	mul	r26, r20
 b8c:	80 0d       	add	r24, r0
 b8e:	91 1d       	adc	r25, r1
 b90:	11 24       	eor	r1, r1
 b92:	08 95       	ret

00000b94 <__udivmodsi4>:
 b94:	a1 e2       	ldi	r26, 0x21	; 33
 b96:	1a 2e       	mov	r1, r26
 b98:	aa 1b       	sub	r26, r26
 b9a:	bb 1b       	sub	r27, r27
 b9c:	fd 01       	movw	r30, r26
 b9e:	0d c0       	rjmp	.+26     	; 0xbba <__udivmodsi4_ep>

00000ba0 <__udivmodsi4_loop>:
 ba0:	aa 1f       	adc	r26, r26
 ba2:	bb 1f       	adc	r27, r27
 ba4:	ee 1f       	adc	r30, r30
 ba6:	ff 1f       	adc	r31, r31
 ba8:	a2 17       	cp	r26, r18
 baa:	b3 07       	cpc	r27, r19
 bac:	e4 07       	cpc	r30, r20
 bae:	f5 07       	cpc	r31, r21
 bb0:	20 f0       	brcs	.+8      	; 0xbba <__udivmodsi4_ep>
 bb2:	a2 1b       	sub	r26, r18
 bb4:	b3 0b       	sbc	r27, r19
 bb6:	e4 0b       	sbc	r30, r20
 bb8:	f5 0b       	sbc	r31, r21

00000bba <__udivmodsi4_ep>:
 bba:	66 1f       	adc	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	99 1f       	adc	r25, r25
 bc2:	1a 94       	dec	r1
 bc4:	69 f7       	brne	.-38     	; 0xba0 <__udivmodsi4_loop>
 bc6:	60 95       	com	r22
 bc8:	70 95       	com	r23
 bca:	80 95       	com	r24
 bcc:	90 95       	com	r25
 bce:	9b 01       	movw	r18, r22
 bd0:	ac 01       	movw	r20, r24
 bd2:	bd 01       	movw	r22, r26
 bd4:	cf 01       	movw	r24, r30
 bd6:	08 95       	ret

00000bd8 <__tablejump2__>:
 bd8:	ee 0f       	add	r30, r30
 bda:	ff 1f       	adc	r31, r31
 bdc:	05 90       	lpm	r0, Z+
 bde:	f4 91       	lpm	r31, Z
 be0:	e0 2d       	mov	r30, r0
 be2:	09 94       	ijmp

00000be4 <__umulhisi3>:
 be4:	a2 9f       	mul	r26, r18
 be6:	b0 01       	movw	r22, r0
 be8:	b3 9f       	mul	r27, r19
 bea:	c0 01       	movw	r24, r0
 bec:	a3 9f       	mul	r26, r19
 bee:	70 0d       	add	r23, r0
 bf0:	81 1d       	adc	r24, r1
 bf2:	11 24       	eor	r1, r1
 bf4:	91 1d       	adc	r25, r1
 bf6:	b2 9f       	mul	r27, r18
 bf8:	70 0d       	add	r23, r0
 bfa:	81 1d       	adc	r24, r1
 bfc:	11 24       	eor	r1, r1
 bfe:	91 1d       	adc	r25, r1
 c00:	08 95       	ret

00000c02 <_exit>:
 c02:	f8 94       	cli

00000c04 <__stop_program>:
 c04:	ff cf       	rjmp	.-2      	; 0xc04 <__stop_program>
