
Exercise6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000007f6  0000088a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800106  00800106  00000890  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019fc  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e03  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e51  00000000  00000000  000032b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000490  00000000  00000000  00004108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a41  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010b8  00000000  00000000  00004fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_1>
   8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_2>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	e6 ef       	ldi	r30, 0xF6	; 246
  cc:	f7 e0       	ldi	r31, 0x07	; 7
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a6 30       	cpi	r26, 0x06	; 6
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a6 e0       	ldi	r26, 0x06	; 6
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	af 30       	cpi	r26, 0x0F	; 15
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  ee:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <_Z10greenLedOnv>:
#define GREENLED 3
#define PHOTORESISTOR A0

bool state = 1;

void greenLedOn() {
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(GREENLED, state);
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 102:	68 2f       	mov	r22, r24
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	state = !state;
 10a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	89 27       	eor	r24, r25
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 116:	00 00       	nop
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <setup>:

void setup() {
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	pinMode(PHOTORESISTOR, INPUT);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	8e e0       	ldi	r24, 0x0E	; 14
 12a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pinMode>
	pinMode(REDLED, OUTPUT);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pinMode>
	pinMode(YELLOWLED, OUTPUT);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pinMode>
	pinMode(GREENLED, OUTPUT);
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pinMode>
	attachInterrupt(digitalPinToInterrupt(REDLED), greenLedOn, RISING);
 146:	43 e0       	ldi	r20, 0x03	; 3
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	6b e7       	ldi	r22, 0x7B	; 123
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 47 01 	call	0x28e	; 0x28e <attachInterrupt>
}
 154:	00 00       	nop
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <loop>:

void loop() {
 15c:	af 92       	push	r10
 15e:	bf 92       	push	r11
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <loop+0x16>
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	int brightness = analogRead(PHOTORESISTOR);
 176:	8e e0       	ldi	r24, 0x0E	; 14
 178:	0e 94 9b 02 	call	0x536	; 0x536 <analogRead>
 17c:	9a 83       	std	Y+2, r25	; 0x02
 17e:	89 83       	std	Y+1, r24	; 0x01
	brightness = map(brightness, 0, 1023, 0, 255);
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	09 2e       	mov	r0, r25
 186:	00 0c       	add	r0, r0
 188:	aa 0b       	sbc	r26, r26
 18a:	bb 0b       	sbc	r27, r27
 18c:	1f 92       	push	r1
 18e:	1f 92       	push	r1
 190:	1f 92       	push	r1
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	2f 93       	push	r18
 196:	a1 2c       	mov	r10, r1
 198:	b1 2c       	mov	r11, r1
 19a:	65 01       	movw	r12, r10
 19c:	ee 24       	eor	r14, r14
 19e:	ea 94       	dec	r14
 1a0:	13 e0       	ldi	r17, 0x03	; 3
 1a2:	f1 2e       	mov	r15, r17
 1a4:	00 e0       	ldi	r16, 0x00	; 0
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	a9 01       	movw	r20, r18
 1ae:	bc 01       	movw	r22, r24
 1b0:	cd 01       	movw	r24, r26
 1b2:	0e 94 4c 03 	call	0x698	; 0x698 <_Z3maplllll>
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	dc 01       	movw	r26, r24
 1c0:	cb 01       	movw	r24, r22
 1c2:	9a 83       	std	Y+2, r25	; 0x02
 1c4:	89 83       	std	Y+1, r24	; 0x01
	if (brightness > 86 && brightness <= 170) {
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ca:	87 35       	cpi	r24, 0x57	; 87
 1cc:	91 05       	cpc	r25, r1
 1ce:	84 f0       	brlt	.+32     	; 0x1f0 <loop+0x94>
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	8b 3a       	cpi	r24, 0xAB	; 171
 1d6:	91 05       	cpc	r25, r1
 1d8:	5c f4       	brge	.+22     	; 0x1f0 <loop+0x94>
		digitalWrite(YELLOWLED, HIGH);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
		delay(2000);
 1e2:	60 ed       	ldi	r22, 0xD0	; 208
 1e4:	77 e0       	ldi	r23, 0x07	; 7
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 24 02 	call	0x448	; 0x448 <delay>
 1ee:	22 c0       	rjmp	.+68     	; 0x234 <loop+0xd8>
	}
	else if (brightness <= 85){
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	86 35       	cpi	r24, 0x56	; 86
 1f6:	91 05       	cpc	r25, r1
 1f8:	bc f4       	brge	.+46     	; 0x228 <loop+0xcc>
		digitalWrite(YELLOWLED, HIGH);
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
		digitalWrite(REDLED, HIGH);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
		delay(1000);
 20a:	68 ee       	ldi	r22, 0xE8	; 232
 20c:	73 e0       	ldi	r23, 0x03	; 3
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 24 02 	call	0x448	; 0x448 <delay>
		greenLedOn();
 216:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z10greenLedOnv>
		delay(1000);
 21a:	68 ee       	ldi	r22, 0xE8	; 232
 21c:	73 e0       	ldi	r23, 0x03	; 3
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 24 02 	call	0x448	; 0x448 <delay>
 226:	06 c0       	rjmp	.+12     	; 0x234 <loop+0xd8>
	}
	else {
		delay(2000);
 228:	60 ed       	ldi	r22, 0xD0	; 208
 22a:	77 e0       	ldi	r23, 0x07	; 7
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 24 02 	call	0x448	; 0x448 <delay>
	}
	digitalWrite(YELLOWLED, LOW);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	digitalWrite(REDLED, LOW);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 1d 03 	call	0x63a	; 0x63a <digitalWrite>
	delay(500);
 244:	64 ef       	ldi	r22, 0xF4	; 244
 246:	71 e0       	ldi	r23, 0x01	; 1
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 24 02 	call	0x448	; 0x448 <delay>
}
 250:	00 00       	nop
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	df 90       	pop	r13
 264:	cf 90       	pop	r12
 266:	bf 90       	pop	r11
 268:	af 90       	pop	r10
 26a:	08 95       	ret

0000026c <initVariant>:
 26c:	08 95       	ret

0000026e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 26e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <init>

	initVariant();
 272:	0e 94 36 01 	call	0x26c	; 0x26c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 276:	0e 94 8f 00 	call	0x11e	; 0x11e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 27e:	0e 94 ae 00 	call	0x15c	; 0x15c <loop>
		if (serialEventRun) serialEventRun();
 282:	20 97       	sbiw	r28, 0x00	; 0
 284:	e1 f3       	breq	.-8      	; 0x27e <main+0x10>
 286:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 28a:	f9 cf       	rjmp	.-14     	; 0x27e <main+0x10>

0000028c <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
 28c:	08 95       	ret

0000028e <attachInterrupt>:
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	e8 f4       	brcc	.+58     	; 0x2cc <attachInterrupt+0x3e>
 292:	e8 2f       	mov	r30, r24
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	ef 5f       	subi	r30, 0xFF	; 255
 29c:	fe 4f       	sbci	r31, 0xFE	; 254
 29e:	71 83       	std	Z+1, r23	; 0x01
 2a0:	60 83       	st	Z, r22
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	41 f0       	breq	.+16     	; 0x2b6 <attachInterrupt+0x28>
 2a6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2aa:	8c 7f       	andi	r24, 0xFC	; 252
 2ac:	48 2b       	or	r20, r24
 2ae:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2b2:	e8 9a       	sbi	0x1d, 0	; 29
 2b4:	08 95       	ret
 2b6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2ba:	83 7f       	andi	r24, 0xF3	; 243
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	48 2b       	or	r20, r24
 2c6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2ca:	e9 9a       	sbi	0x1d, 1	; 29
 2cc:	08 95       	ret

000002ce <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
 2f0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <intFunc>
 2f4:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <intFunc+0x1>
 2f8:	09 95       	icall
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
 33e:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <intFunc+0x2>
 342:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <intFunc+0x3>
 346:	09 95       	icall
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	2f 93       	push	r18
 376:	3f 93       	push	r19
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timer0_millis>
 384:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timer0_millis+0x1>
 388:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timer0_millis+0x2>
 38c:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timer0_millis+0x3>
 390:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__data_end>
 394:	23 e0       	ldi	r18, 0x03	; 3
 396:	23 0f       	add	r18, r19
 398:	2d 37       	cpi	r18, 0x7D	; 125
 39a:	20 f4       	brcc	.+8      	; 0x3a4 <__vector_16+0x3a>
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	a1 1d       	adc	r26, r1
 3a0:	b1 1d       	adc	r27, r1
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <__vector_16+0x44>
 3a4:	26 e8       	ldi	r18, 0x86	; 134
 3a6:	23 0f       	add	r18, r19
 3a8:	02 96       	adiw	r24, 0x02	; 2
 3aa:	a1 1d       	adc	r26, r1
 3ac:	b1 1d       	adc	r27, r1
 3ae:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 3b2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timer0_millis>
 3b6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timer0_millis+0x1>
 3ba:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timer0_millis+0x2>
 3be:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timer0_millis+0x3>
 3c2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 3c6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 3ca:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 3ce:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	a1 1d       	adc	r26, r1
 3d6:	b1 1d       	adc	r27, r1
 3d8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timer0_overflow_count>
 3dc:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <timer0_overflow_count+0x1>
 3e0:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <timer0_overflow_count+0x2>
 3e4:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <timer0_overflow_count+0x3>
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	3f 91       	pop	r19
 3f2:	2f 91       	pop	r18
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <micros>:
 3fe:	3f b7       	in	r19, 0x3f	; 63
 400:	f8 94       	cli
 402:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 406:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 40a:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 40e:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 412:	26 b5       	in	r18, 0x26	; 38
 414:	a8 9b       	sbis	0x15, 0	; 21
 416:	05 c0       	rjmp	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 418:	2f 3f       	cpi	r18, 0xFF	; 255
 41a:	19 f0       	breq	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	a1 1d       	adc	r26, r1
 420:	b1 1d       	adc	r27, r1
 422:	3f bf       	out	0x3f, r19	; 63
 424:	ba 2f       	mov	r27, r26
 426:	a9 2f       	mov	r26, r25
 428:	98 2f       	mov	r25, r24
 42a:	88 27       	eor	r24, r24
 42c:	82 0f       	add	r24, r18
 42e:	91 1d       	adc	r25, r1
 430:	a1 1d       	adc	r26, r1
 432:	b1 1d       	adc	r27, r1
 434:	bc 01       	movw	r22, r24
 436:	cd 01       	movw	r24, r26
 438:	42 e0       	ldi	r20, 0x02	; 2
 43a:	66 0f       	add	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	88 1f       	adc	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	4a 95       	dec	r20
 444:	d1 f7       	brne	.-12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 446:	08 95       	ret

00000448 <delay>:
 448:	8f 92       	push	r8
 44a:	9f 92       	push	r9
 44c:	af 92       	push	r10
 44e:	bf 92       	push	r11
 450:	cf 92       	push	r12
 452:	df 92       	push	r13
 454:	ef 92       	push	r14
 456:	ff 92       	push	r15
 458:	6b 01       	movw	r12, r22
 45a:	7c 01       	movw	r14, r24
 45c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <micros>
 460:	4b 01       	movw	r8, r22
 462:	5c 01       	movw	r10, r24
 464:	c1 14       	cp	r12, r1
 466:	d1 04       	cpc	r13, r1
 468:	e1 04       	cpc	r14, r1
 46a:	f1 04       	cpc	r15, r1
 46c:	01 f1       	breq	.+64     	; 0x4ae <delay+0x66>
 46e:	0e 94 8d 03 	call	0x71a	; 0x71a <yield>
 472:	0e 94 ff 01 	call	0x3fe	; 0x3fe <micros>
 476:	dc 01       	movw	r26, r24
 478:	cb 01       	movw	r24, r22
 47a:	88 19       	sub	r24, r8
 47c:	99 09       	sbc	r25, r9
 47e:	aa 09       	sbc	r26, r10
 480:	bb 09       	sbc	r27, r11
 482:	88 3e       	cpi	r24, 0xE8	; 232
 484:	93 40       	sbci	r25, 0x03	; 3
 486:	a1 05       	cpc	r26, r1
 488:	b1 05       	cpc	r27, r1
 48a:	60 f3       	brcs	.-40     	; 0x464 <delay+0x1c>
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	c2 1a       	sub	r12, r18
 490:	d1 08       	sbc	r13, r1
 492:	e1 08       	sbc	r14, r1
 494:	f1 08       	sbc	r15, r1
 496:	88 ee       	ldi	r24, 0xE8	; 232
 498:	88 0e       	add	r8, r24
 49a:	83 e0       	ldi	r24, 0x03	; 3
 49c:	98 1e       	adc	r9, r24
 49e:	a1 1c       	adc	r10, r1
 4a0:	b1 1c       	adc	r11, r1
 4a2:	c1 14       	cp	r12, r1
 4a4:	d1 04       	cpc	r13, r1
 4a6:	e1 04       	cpc	r14, r1
 4a8:	f1 04       	cpc	r15, r1
 4aa:	19 f7       	brne	.-58     	; 0x472 <delay+0x2a>
 4ac:	db cf       	rjmp	.-74     	; 0x464 <delay+0x1c>
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	bf 90       	pop	r11
 4b8:	af 90       	pop	r10
 4ba:	9f 90       	pop	r9
 4bc:	8f 90       	pop	r8
 4be:	08 95       	ret

000004c0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 4c0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 4c2:	84 b5       	in	r24, 0x24	; 36
 4c4:	82 60       	ori	r24, 0x02	; 2
 4c6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 4c8:	84 b5       	in	r24, 0x24	; 36
 4ca:	81 60       	ori	r24, 0x01	; 1
 4cc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 4ce:	85 b5       	in	r24, 0x25	; 37
 4d0:	82 60       	ori	r24, 0x02	; 2
 4d2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 4d4:	85 b5       	in	r24, 0x25	; 37
 4d6:	81 60       	ori	r24, 0x01	; 1
 4d8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 4da:	ee e6       	ldi	r30, 0x6E	; 110
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	81 60       	ori	r24, 0x01	; 1
 4e2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 4e4:	e1 e8       	ldi	r30, 0x81	; 129
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 4ea:	80 81       	ld	r24, Z
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 4f0:	80 81       	ld	r24, Z
 4f2:	81 60       	ori	r24, 0x01	; 1
 4f4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 4f6:	e0 e8       	ldi	r30, 0x80	; 128
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	81 60       	ori	r24, 0x01	; 1
 4fe:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 500:	e1 eb       	ldi	r30, 0xB1	; 177
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	84 60       	ori	r24, 0x04	; 4
 508:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 50a:	e0 eb       	ldi	r30, 0xB0	; 176
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	81 60       	ori	r24, 0x01	; 1
 512:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 514:	ea e7       	ldi	r30, 0x7A	; 122
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	84 60       	ori	r24, 0x04	; 4
 51c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 51e:	80 81       	ld	r24, Z
 520:	82 60       	ori	r24, 0x02	; 2
 522:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 524:	80 81       	ld	r24, Z
 526:	81 60       	ori	r24, 0x01	; 1
 528:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 52a:	80 81       	ld	r24, Z
 52c:	80 68       	ori	r24, 0x80	; 128
 52e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 530:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 534:	08 95       	ret

00000536 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 536:	8e 30       	cpi	r24, 0x0E	; 14
 538:	08 f0       	brcs	.+2      	; 0x53c <analogRead+0x6>
 53a:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 53c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <analog_reference>
 540:	90 e4       	ldi	r25, 0x40	; 64
 542:	29 9f       	mul	r18, r25
 544:	90 01       	movw	r18, r0
 546:	11 24       	eor	r1, r1
 548:	87 70       	andi	r24, 0x07	; 7
 54a:	82 2b       	or	r24, r18
 54c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 550:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 554:	80 64       	ori	r24, 0x40	; 64
 556:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 55a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 55e:	86 fd       	sbrc	r24, 6
 560:	fc cf       	rjmp	.-8      	; 0x55a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 562:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 566:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 56a:	90 e0       	ldi	r25, 0x00	; 0
}
 56c:	92 2b       	or	r25, r18
 56e:	08 95       	ret

00000570 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 570:	83 30       	cpi	r24, 0x03	; 3
 572:	81 f0       	breq	.+32     	; 0x594 <turnOffPWM+0x24>
 574:	28 f4       	brcc	.+10     	; 0x580 <turnOffPWM+0x10>
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	99 f0       	breq	.+38     	; 0x5a0 <turnOffPWM+0x30>
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	a1 f0       	breq	.+40     	; 0x5a6 <turnOffPWM+0x36>
 57e:	08 95       	ret
 580:	87 30       	cpi	r24, 0x07	; 7
 582:	a9 f0       	breq	.+42     	; 0x5ae <turnOffPWM+0x3e>
 584:	88 30       	cpi	r24, 0x08	; 8
 586:	b9 f0       	breq	.+46     	; 0x5b6 <turnOffPWM+0x46>
 588:	84 30       	cpi	r24, 0x04	; 4
 58a:	d1 f4       	brne	.+52     	; 0x5c0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 58c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 590:	8f 7d       	andi	r24, 0xDF	; 223
 592:	03 c0       	rjmp	.+6      	; 0x59a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 594:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 598:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 59a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 59e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 5a0:	84 b5       	in	r24, 0x24	; 36
 5a2:	8f 77       	andi	r24, 0x7F	; 127
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 5a6:	84 b5       	in	r24, 0x24	; 36
 5a8:	8f 7d       	andi	r24, 0xDF	; 223
 5aa:	84 bd       	out	0x24, r24	; 36
 5ac:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 5ae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5b2:	8f 77       	andi	r24, 0x7F	; 127
 5b4:	03 c0       	rjmp	.+6      	; 0x5bc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 5b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5ba:	8f 7d       	andi	r24, 0xDF	; 223
 5bc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5c0:	08 95       	ret

000005c2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	fc 01       	movw	r30, r24
 5ca:	e4 58       	subi	r30, 0x84	; 132
 5cc:	ff 4f       	sbci	r31, 0xFF	; 255
 5ce:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 5d0:	fc 01       	movw	r30, r24
 5d2:	e0 57       	subi	r30, 0x70	; 112
 5d4:	ff 4f       	sbci	r31, 0xFF	; 255
 5d6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 5d8:	88 23       	and	r24, r24
 5da:	61 f1       	breq	.+88     	; 0x634 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	fc 01       	movw	r30, r24
 5e4:	e2 55       	subi	r30, 0x52	; 82
 5e6:	ff 4f       	sbci	r31, 0xFF	; 255
 5e8:	c5 91       	lpm	r28, Z+
 5ea:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 5ec:	fc 01       	movw	r30, r24
 5ee:	ec 55       	subi	r30, 0x5C	; 92
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	a5 91       	lpm	r26, Z+
 5f4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 5f6:	61 11       	cpse	r22, r1
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 5fa:	9f b7       	in	r25, 0x3f	; 63
                cli();
 5fc:	f8 94       	cli
		*reg &= ~bit;
 5fe:	88 81       	ld	r24, Y
 600:	20 95       	com	r18
 602:	82 23       	and	r24, r18
 604:	88 83       	st	Y, r24
		*out &= ~bit;
 606:	ec 91       	ld	r30, X
 608:	2e 23       	and	r18, r30
 60a:	0b c0       	rjmp	.+22     	; 0x622 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 60c:	62 30       	cpi	r22, 0x02	; 2
 60e:	61 f4       	brne	.+24     	; 0x628 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 610:	9f b7       	in	r25, 0x3f	; 63
                cli();
 612:	f8 94       	cli
		*reg &= ~bit;
 614:	88 81       	ld	r24, Y
 616:	32 2f       	mov	r19, r18
 618:	30 95       	com	r19
 61a:	83 23       	and	r24, r19
 61c:	88 83       	st	Y, r24
		*out |= bit;
 61e:	ec 91       	ld	r30, X
 620:	2e 2b       	or	r18, r30
 622:	2c 93       	st	X, r18
		SREG = oldSREG;
 624:	9f bf       	out	0x3f, r25	; 63
 626:	06 c0       	rjmp	.+12     	; 0x634 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 628:	8f b7       	in	r24, 0x3f	; 63
                cli();
 62a:	f8 94       	cli
		*reg |= bit;
 62c:	e8 81       	ld	r30, Y
 62e:	2e 2b       	or	r18, r30
 630:	28 83       	st	Y, r18
		SREG = oldSREG;
 632:	8f bf       	out	0x3f, r24	; 63
	}
}
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	f9 01       	movw	r30, r18
 646:	e8 59       	subi	r30, 0x98	; 152
 648:	ff 4f       	sbci	r31, 0xFF	; 255
 64a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 64c:	f9 01       	movw	r30, r18
 64e:	e4 58       	subi	r30, 0x84	; 132
 650:	ff 4f       	sbci	r31, 0xFF	; 255
 652:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 654:	f9 01       	movw	r30, r18
 656:	e0 57       	subi	r30, 0x70	; 112
 658:	ff 4f       	sbci	r31, 0xFF	; 255
 65a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 65c:	cc 23       	and	r28, r28
 65e:	c1 f0       	breq	.+48     	; 0x690 <digitalWrite+0x56>
 660:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 662:	81 11       	cpse	r24, r1
 664:	0e 94 b8 02 	call	0x570	; 0x570 <turnOffPWM>

	out = portOutputRegister(port);
 668:	ec 2f       	mov	r30, r28
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	ec 55       	subi	r30, 0x5C	; 92
 672:	ff 4f       	sbci	r31, 0xFF	; 255
 674:	a5 91       	lpm	r26, Z+
 676:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 678:	9f b7       	in	r25, 0x3f	; 63
	cli();
 67a:	f8 94       	cli

	if (val == LOW) {
 67c:	11 11       	cpse	r17, r1
 67e:	04 c0       	rjmp	.+8      	; 0x688 <digitalWrite+0x4e>
		*out &= ~bit;
 680:	8c 91       	ld	r24, X
 682:	d0 95       	com	r29
 684:	d8 23       	and	r29, r24
 686:	02 c0       	rjmp	.+4      	; 0x68c <digitalWrite+0x52>
	} else {
		*out |= bit;
 688:	ec 91       	ld	r30, X
 68a:	de 2b       	or	r29, r30
 68c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 68e:	9f bf       	out	0x3f, r25	; 63
}
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	08 95       	ret

00000698 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 698:	4f 92       	push	r4
 69a:	5f 92       	push	r5
 69c:	6f 92       	push	r6
 69e:	7f 92       	push	r7
 6a0:	af 92       	push	r10
 6a2:	bf 92       	push	r11
 6a4:	cf 92       	push	r12
 6a6:	df 92       	push	r13
 6a8:	ef 92       	push	r14
 6aa:	ff 92       	push	r15
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62
 6b8:	29 01       	movw	r4, r18
 6ba:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 6bc:	9b 01       	movw	r18, r22
 6be:	ac 01       	movw	r20, r24
 6c0:	24 19       	sub	r18, r4
 6c2:	35 09       	sbc	r19, r5
 6c4:	46 09       	sbc	r20, r6
 6c6:	57 09       	sbc	r21, r7
 6c8:	89 89       	ldd	r24, Y+17	; 0x11
 6ca:	9a 89       	ldd	r25, Y+18	; 0x12
 6cc:	ab 89       	ldd	r26, Y+19	; 0x13
 6ce:	bc 89       	ldd	r27, Y+20	; 0x14
 6d0:	bc 01       	movw	r22, r24
 6d2:	cd 01       	movw	r24, r26
 6d4:	6a 19       	sub	r22, r10
 6d6:	7b 09       	sbc	r23, r11
 6d8:	8c 09       	sbc	r24, r12
 6da:	9d 09       	sbc	r25, r13
 6dc:	0e 94 8e 03 	call	0x71c	; 0x71c <__mulsi3>
 6e0:	a8 01       	movw	r20, r16
 6e2:	97 01       	movw	r18, r14
 6e4:	24 19       	sub	r18, r4
 6e6:	35 09       	sbc	r19, r5
 6e8:	46 09       	sbc	r20, r6
 6ea:	57 09       	sbc	r21, r7
 6ec:	0e 94 9e 03 	call	0x73c	; 0x73c <__divmodsi4>
 6f0:	ca 01       	movw	r24, r20
 6f2:	b9 01       	movw	r22, r18
 6f4:	6a 0d       	add	r22, r10
 6f6:	7b 1d       	adc	r23, r11
 6f8:	8c 1d       	adc	r24, r12
 6fa:	9d 1d       	adc	r25, r13
}
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	ff 90       	pop	r15
 706:	ef 90       	pop	r14
 708:	df 90       	pop	r13
 70a:	cf 90       	pop	r12
 70c:	bf 90       	pop	r11
 70e:	af 90       	pop	r10
 710:	7f 90       	pop	r7
 712:	6f 90       	pop	r6
 714:	5f 90       	pop	r5
 716:	4f 90       	pop	r4
 718:	08 95       	ret

0000071a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 71a:	08 95       	ret

0000071c <__mulsi3>:
 71c:	db 01       	movw	r26, r22
 71e:	8f 93       	push	r24
 720:	9f 93       	push	r25
 722:	0e 94 bd 03 	call	0x77a	; 0x77a <__muluhisi3>
 726:	bf 91       	pop	r27
 728:	af 91       	pop	r26
 72a:	a2 9f       	mul	r26, r18
 72c:	80 0d       	add	r24, r0
 72e:	91 1d       	adc	r25, r1
 730:	a3 9f       	mul	r26, r19
 732:	90 0d       	add	r25, r0
 734:	b2 9f       	mul	r27, r18
 736:	90 0d       	add	r25, r0
 738:	11 24       	eor	r1, r1
 73a:	08 95       	ret

0000073c <__divmodsi4>:
 73c:	05 2e       	mov	r0, r21
 73e:	97 fb       	bst	r25, 7
 740:	1e f4       	brtc	.+6      	; 0x748 <__divmodsi4+0xc>
 742:	00 94       	com	r0
 744:	0e 94 b5 03 	call	0x76a	; 0x76a <__negsi2>
 748:	57 fd       	sbrc	r21, 7
 74a:	07 d0       	rcall	.+14     	; 0x75a <__divmodsi4_neg2>
 74c:	0e 94 c8 03 	call	0x790	; 0x790 <__udivmodsi4>
 750:	07 fc       	sbrc	r0, 7
 752:	03 d0       	rcall	.+6      	; 0x75a <__divmodsi4_neg2>
 754:	4e f4       	brtc	.+18     	; 0x768 <__divmodsi4_exit>
 756:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__negsi2>

0000075a <__divmodsi4_neg2>:
 75a:	50 95       	com	r21
 75c:	40 95       	com	r20
 75e:	30 95       	com	r19
 760:	21 95       	neg	r18
 762:	3f 4f       	sbci	r19, 0xFF	; 255
 764:	4f 4f       	sbci	r20, 0xFF	; 255
 766:	5f 4f       	sbci	r21, 0xFF	; 255

00000768 <__divmodsi4_exit>:
 768:	08 95       	ret

0000076a <__negsi2>:
 76a:	90 95       	com	r25
 76c:	80 95       	com	r24
 76e:	70 95       	com	r23
 770:	61 95       	neg	r22
 772:	7f 4f       	sbci	r23, 0xFF	; 255
 774:	8f 4f       	sbci	r24, 0xFF	; 255
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	08 95       	ret

0000077a <__muluhisi3>:
 77a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__umulhisi3>
 77e:	a5 9f       	mul	r26, r21
 780:	90 0d       	add	r25, r0
 782:	b4 9f       	mul	r27, r20
 784:	90 0d       	add	r25, r0
 786:	a4 9f       	mul	r26, r20
 788:	80 0d       	add	r24, r0
 78a:	91 1d       	adc	r25, r1
 78c:	11 24       	eor	r1, r1
 78e:	08 95       	ret

00000790 <__udivmodsi4>:
 790:	a1 e2       	ldi	r26, 0x21	; 33
 792:	1a 2e       	mov	r1, r26
 794:	aa 1b       	sub	r26, r26
 796:	bb 1b       	sub	r27, r27
 798:	fd 01       	movw	r30, r26
 79a:	0d c0       	rjmp	.+26     	; 0x7b6 <__udivmodsi4_ep>

0000079c <__udivmodsi4_loop>:
 79c:	aa 1f       	adc	r26, r26
 79e:	bb 1f       	adc	r27, r27
 7a0:	ee 1f       	adc	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	a2 17       	cp	r26, r18
 7a6:	b3 07       	cpc	r27, r19
 7a8:	e4 07       	cpc	r30, r20
 7aa:	f5 07       	cpc	r31, r21
 7ac:	20 f0       	brcs	.+8      	; 0x7b6 <__udivmodsi4_ep>
 7ae:	a2 1b       	sub	r26, r18
 7b0:	b3 0b       	sbc	r27, r19
 7b2:	e4 0b       	sbc	r30, r20
 7b4:	f5 0b       	sbc	r31, r21

000007b6 <__udivmodsi4_ep>:
 7b6:	66 1f       	adc	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	1a 94       	dec	r1
 7c0:	69 f7       	brne	.-38     	; 0x79c <__udivmodsi4_loop>
 7c2:	60 95       	com	r22
 7c4:	70 95       	com	r23
 7c6:	80 95       	com	r24
 7c8:	90 95       	com	r25
 7ca:	9b 01       	movw	r18, r22
 7cc:	ac 01       	movw	r20, r24
 7ce:	bd 01       	movw	r22, r26
 7d0:	cf 01       	movw	r24, r30
 7d2:	08 95       	ret

000007d4 <__umulhisi3>:
 7d4:	a2 9f       	mul	r26, r18
 7d6:	b0 01       	movw	r22, r0
 7d8:	b3 9f       	mul	r27, r19
 7da:	c0 01       	movw	r24, r0
 7dc:	a3 9f       	mul	r26, r19
 7de:	70 0d       	add	r23, r0
 7e0:	81 1d       	adc	r24, r1
 7e2:	11 24       	eor	r1, r1
 7e4:	91 1d       	adc	r25, r1
 7e6:	b2 9f       	mul	r27, r18
 7e8:	70 0d       	add	r23, r0
 7ea:	81 1d       	adc	r24, r1
 7ec:	11 24       	eor	r1, r1
 7ee:	91 1d       	adc	r25, r1
 7f0:	08 95       	ret

000007f2 <_exit>:
 7f2:	f8 94       	cli

000007f4 <__stop_program>:
 7f4:	ff cf       	rjmp	.-2      	; 0x7f4 <__stop_program>
